/**
 * Chatooly CDN v2.0.0 - Complete library with canvas area system (minified)
 * Built: 2025-09-14T16:46:10.362Z
 * Original size: 241.1KB
 */
(function(){'use strict';window.Chatooly ={version:'2.0.0',config:{},init:function(userConfig){this.config = Object.assign({name:'Untitled Tool',exportFormats:['png'],resolution:2,buttonPosition:'bottom-right',enableZoom:true,enableCanvasArea:true,canvasAreaPosition:'full'},userConfig);if(this.styleLoader){this.styleLoader.inject()}if(this.config.enableCanvasArea && this.canvasArea){this.canvasArea.init({position:this.config.canvasAreaPosition})}this.ui.createExportButton();this.utils.logDevelopmentMode();if(this.config.enableZoom && this.canvasZoom){setTimeout(()=>{this.canvasZoom.init()},200)}},export:function(format,options){format = format || 'png';options = options ||{};if(format !== 'png'){console.warn('Chatooly:Only PNG export supported in this version');return}const target = this.utils.detectExportTarget();this.pngExport.export(target,options)}};Chatooly.utils ={detectExportTarget:function(){const chatoolyCanvasElement = document.querySelector('canvas#chatooly-canvas');if(chatoolyCanvasElement){return{type:'canvas',element:chatoolyCanvasElement}}const chatoolyContainer = document.querySelector('div#chatooly-canvas');if(chatoolyContainer){const innerCanvas = chatoolyContainer.querySelector('canvas');if(innerCanvas){return{type:'canvas',element:innerCanvas}}return{type:'dom',element:chatoolyContainer}}const canvases = document.querySelectorAll('canvas');if(canvases.length > 0){let largestCanvas = canvases[0];for(let i = 1;i < canvases.length;i++){const canvas = canvases[i];if(canvas.width * canvas.height > largestCanvas.width * largestCanvas.height){largestCanvas = canvas}}return{type:'canvas',element:largestCanvas}}const containers = ['#app','#canvas-container','main'];for(const selector of containers){const element = document.querySelector(selector);if(element){return{type:'dom',element:element}}}return{type:'dom',element:document.body}},isDevelopment:function(){return location.hostname === 'localhost' || location.hostname === '127.0.0.1' || location.hostname === '::' || location.hostname === '[::1]' || location.protocol === 'file:'},generateFilename:function(config,format){const toolName = config.name.toLowerCase().replace(/[^a-z0-9]/g,'-');const timestamp = new Date().toISOString().slice(0,10);const extension = format || 'png';return `${toolName}-export-${timestamp}.${extension}`},downloadImage:function(dataURL,filename){const link = document.createElement('a');link.download = filename;link.href = dataURL;document.body.appendChild(link);link.click();document.body.removeChild(link)},canRerenderAtHighRes:function(canvas){return window.p5 || window.THREE || canvas.id === 'defaultCanvas0'},logDevelopmentMode:function(){if(this.isDevelopment()){console.log('Chatooly:Development mode detected - publish functionality enabled')}},_isP5Canvas:function(canvas){if(!window.p5)return false;if(canvas.id === 'defaultCanvas0')return true;if(typeof window.pixelDensity === 'function')return true;if(canvas._pInst || canvas.drawingContext?._pInst)return true;if(canvas.classList && canvas.classList.contains('p5Canvas'))return true;return false},_isThreeCanvas:function(canvas){if(!window.THREE)return false;if(window.renderer || window.threeRenderer)return true;const context = canvas.getContext('webgl')|| canvas.getContext('webgl2')|| canvas.getContext('experimental-webgl');if(!context)return false;if(canvas._threeRenderer || canvas.threeRenderer)return true;if(canvas.dataset && canvas.dataset.threeRenderer)return true;return true},getCanvasCoordinateMapping:function(){const target = this.detectExportTarget();if(!target.element || target.type !== 'canvas'){return null}const canvas = target.element;const rect = canvas.getBoundingClientRect();const canvasWidth = canvas.width;const canvasHeight = canvas.height;const displayWidth = rect.width;const displayHeight = rect.height;return{canvas:{width:canvasWidth,height:canvasHeight},display:{width:displayWidth,height:displayHeight},scale:{x:canvasWidth / displayWidth,y:canvasHeight / displayHeight}}},mapMouseToCanvas:function(mouseEvent,canvas){canvas = canvas || this.detectExportTarget().element;if(!canvas)return{x:0,y:0};const rect = canvas.getBoundingClientRect();const displayX = mouseEvent.clientX - rect.left;const displayY = mouseEvent.clientY - rect.top;const scaleX = canvas.width / rect.width;const scaleY = canvas.height / rect.height;const canvasX = displayX * scaleX;const canvasY = displayY * scaleY;return{x:canvasX,y:canvasY,displayX:displayX,displayY:displayY,scaleX:scaleX,scaleY:scaleY}},mapCanvasToDisplay:function(canvasX,canvasY,canvas){canvas = canvas || this.detectExportTarget().element;if(!canvas)return{x:0,y:0};const rect = canvas.getBoundingClientRect();const scaleX = rect.width / canvas.width;const scaleY = rect.height / canvas.height;return{x:canvasX * scaleX,y:canvasY * scaleY}}};(function(){'use strict';window.Chatooly = window.Chatooly ||{};Chatooly.styleLoader ={cdnBase:'https://yaelren.github.io/chatooly-cdn',isDevelopment:function(){return Chatooly.utils ? Chatooly.utils.isDevelopment():(location.hostname === 'localhost' || location.hostname === '127.0.0.1' || location.hostname === '::' || location.hostname === '[::1]' || location.protocol === 'file:')},getCDNUrl:function(path){const currentUrl = window.location.href;const isLocalCDNDevelopment = this.isDevelopment()&& currentUrl.includes('chatooly-cdn');if(isLocalCDNDevelopment){let cdnPath = currentUrl.substring(0,currentUrl.indexOf('chatooly-cdn')+ 'chatooly-cdn'.length);cdnPath = cdnPath.replace(/\/$/,'');const fullPath = cdnPath + path;console.log('Chatooly StyleLoader:Local CDN development mode,loading from:',fullPath);if(currentUrl.includes('/tests/')){const testPath = cdnPath.replace('/tests','')+ path;console.log('Chatooly StyleLoader:Test subfolder detected,using path:',testPath);return testPath}return fullPath}console.log('Chatooly StyleLoader:Loading from CDN:',this.cdnBase + path);return this.cdnBase + path},inject:function(){if(document.getElementById('chatooly-unified-styles')){console.log('Chatooly:Styles already loaded');return}const link = document.createElement('link');link.id = 'chatooly-unified-styles';link.rel = 'stylesheet';link.href = this.getCDNUrl('/css/unified.min.css');link.onload =()=>{console.log('Chatooly:Styles loaded successfully');this.onStylesLoaded()};link.onerror =()=>{console.error('Chatooly:Failed to load styles');if(this.isDevelopment()){this.loadIndividualStyles()}};const firstStyle = document.querySelector('link[rel="stylesheet"],style');if(firstStyle && firstStyle.parentNode){firstStyle.parentNode.insertBefore(link,firstStyle)}else{document.head.appendChild(link)}},loadIndividualStyles:function(){console.log('Chatooly:Loading individual CSS files(dev mode)');const cssFiles = [ '/css/variables.css','/css/base.css','/css/components.css','/css/layouts/sidebar.css','/css/responsive.css' ];cssFiles.forEach((file,index)=>{const link = document.createElement('link');link.rel = 'stylesheet';link.href = this.getCDNUrl(file);link.dataset.chatoolyStyle = 'individual';if(index === cssFiles.length - 1){link.onload =()=>{console.log('Chatooly:All individual styles loaded');this.onStylesLoaded()}}document.head.appendChild(link)})},onStylesLoaded:function(){document.body.classList.add('chatooly-styles-loaded');const event = new CustomEvent('chatooly:styles-loaded',{detail:{version:Chatooly.version || '2.0.0'}});document.dispatchEvent(event);if(window.ChatoolyConfig && window.ChatoolyConfig.layout){this.applyLayout(window.ChatoolyConfig.layout)}},applyLayout:function(layout){const validLayouts = ['sidebar','tabs','modal','split','custom'];if(validLayouts.includes(layout)){document.body.classList.add(`chatooly-layout-${layout}`);console.log(`Chatooly:Applied ${layout}layout`)}},isLoaded:function(){return document.getElementById('chatooly-unified-styles')!== null || document.querySelector('[data-chatooly-style="individual"]')!== null},reload:function(){const existingStyles = document.querySelectorAll('#chatooly-unified-styles,[data-chatooly-style]');existingStyles.forEach(style => style.remove());document.body.classList.remove('chatooly-styles-loaded');this.inject()},getVariable:function(variableName){const computed = getComputedStyle(document.documentElement);return computed.getPropertyValue(variableName).trim()},setVariable:function(variableName,value){document.documentElement.style.setProperty(variableName,value)},applyTheme:function(theme){const validThemes = ['light','dark','auto'];if(validThemes.includes(theme)){document.body.dataset.theme = theme;console.log(`Chatooly:Applied ${theme}theme`)}}};if(document.readyState === 'loading'){document.addEventListener('DOMContentLoaded',function(){Chatooly.styleLoader.inject()})}else{Chatooly.styleLoader.inject()}})();if(!Chatooly.canvasExporters){Chatooly.canvasExporters ={}}Chatooly.canvasExporters.html5 ={png:{export:function(canvas,options){const resolution = options.resolution || Chatooly.config.resolution || 2;const filename = options.filename || Chatooly.utils.generateFilename(Chatooly.config,'png');try{let dataURL;if(resolution > 1){if(window.renderHighResolution && typeof window.renderHighResolution === 'function'){const scaledCanvas = document.createElement('canvas');scaledCanvas.width = canvas.width * resolution;scaledCanvas.height = canvas.height * resolution;window.renderHighResolution(scaledCanvas,resolution);dataURL = scaledCanvas.toDataURL('image/png')}else if(window.Chatooly && window.Chatooly.renderHighRes && typeof window.Chatooly.renderHighRes === 'function'){const scaledCanvas = document.createElement('canvas');scaledCanvas.width = canvas.width * resolution;scaledCanvas.height = canvas.height * resolution;window.Chatooly.renderHighRes(scaledCanvas,resolution);dataURL = scaledCanvas.toDataURL('image/png');console.log('Chatooly:High-resolution export using Chatooly.renderHighRes API.')}else{const scaledCanvas = document.createElement('canvas');const scaledCtx = scaledCanvas.getContext('2d');scaledCanvas.width = canvas.width * resolution;scaledCanvas.height = canvas.height * resolution;scaledCtx.imageSmoothingEnabled = true;scaledCtx.imageSmoothingQuality = 'high';scaledCtx.drawImage(canvas,0,0,scaledCanvas.width,scaledCanvas.height);dataURL = scaledCanvas.toDataURL('image/png');console.warn('Chatooly:Using upscaling for export. For true high-resolution,implement window.renderHighResolution()or window.Chatooly.renderHighRes()')}}else{dataURL = canvas.toDataURL('image/png')}Chatooly.utils.downloadImage(dataURL,filename);console.log('Chatooly:HTML5 Canvas PNG exported at ' + resolution + 'x resolution')}catch(error){console.error('Chatooly:HTML5 Canvas PNG export failed:',error);alert('PNG export failed. This might be due to CORS restrictions.')}}},jpeg:{export:function(canvas,options){console.warn('JPEG export not yet implemented for HTML5 canvas')}},webm:{export:function(canvas,options){console.warn('WebM video export not yet implemented for HTML5 canvas')}},gif:{export:function(canvas,options){console.warn('GIF export not yet implemented for HTML5 canvas')}}};if(!Chatooly.canvasExporters){Chatooly.canvasExporters ={}}Chatooly.canvasExporters.p5 ={png:{export:function(canvas,options){const resolution = options.resolution || Chatooly.config.resolution || 2;const filename = options.filename || Chatooly.utils.generateFilename(Chatooly.config,'png');try{let dataURL;if(resolution > 1 && window.p5 && window.pixelDensity){const originalDensity = window.pixelDensity();window.pixelDensity(resolution);window.redraw();dataURL = canvas.toDataURL('image/png');window.pixelDensity(originalDensity)}else{dataURL = canvas.toDataURL('image/png')}Chatooly.utils.downloadImage(dataURL,filename);console.log('Chatooly:p5.js Canvas PNG exported at ' + resolution + 'x resolution')}catch(error){console.error('Chatooly:p5.js Canvas PNG export failed:',error);alert('PNG export failed. This might be due to CORS restrictions.')}}},webm:{export:function(canvas,options){console.warn('WebM video export not yet implemented for p5.js canvas')}},gif:{export:function(canvas,options){console.warn('GIF export not yet implemented for p5.js canvas')}},frames:{export:function(canvas,options){console.warn('Frame sequence export not yet implemented for p5.js canvas')}}};if(!Chatooly.canvasExporters){Chatooly.canvasExporters ={}}Chatooly.canvasExporters.three ={png:{export:function(canvas,options){const resolution = options.resolution || Chatooly.config.resolution || 2;const filename = options.filename || Chatooly.utils.generateFilename(Chatooly.config,'png');try{let dataURL;if(resolution > 1 && window.THREE &&(window.renderer || window.threeRenderer)){dataURL = this._renderHighRes(canvas,resolution)}else{dataURL = canvas.toDataURL('image/png')}Chatooly.utils.downloadImage(dataURL,filename);console.log('Chatooly:Three.js Canvas PNG exported at ' + resolution + 'x resolution')}catch(error){console.error('Chatooly:Three.js Canvas PNG export failed:',error);alert('PNG export failed. This might be due to CORS restrictions.')}},_renderHighRes:function(canvas,resolution){const renderer = window.renderer || window.threeRenderer;const scene = window.scene || window.threeScene;const camera = window.camera || window.threeCamera;if(renderer && scene && camera){const originalSize = renderer.getSize(new THREE.Vector2());const targetWidth = originalSize.x * resolution;const targetHeight = originalSize.y * resolution;console.log(`Three.js high-res export:${originalSize.x}x${originalSize.y}-> ${targetWidth}x${targetHeight}(${resolution}x)`);const tempCanvas = document.createElement('canvas');const tempRenderer = new THREE.WebGLRenderer({canvas:tempCanvas,antialias:true,preserveDrawingBuffer:true,alpha:true});tempRenderer.setSize(targetWidth,targetHeight,false);tempRenderer.setPixelRatio(1);tempRenderer.setClearColor(renderer.getClearColor(),renderer.getClearAlpha());tempRenderer.shadowMap.enabled = renderer.shadowMap.enabled;tempRenderer.shadowMap.type = renderer.shadowMap.type;tempRenderer.outputEncoding = renderer.outputEncoding;tempRenderer.toneMapping = renderer.toneMapping;tempRenderer.toneMappingExposure = renderer.toneMappingExposure;const originalAspect = camera.aspect;camera.aspect = targetWidth / targetHeight;camera.updateProjectionMatrix();tempRenderer.render(scene,camera);camera.aspect = originalAspect;camera.updateProjectionMatrix();const dataURL = tempCanvas.toDataURL('image/png');tempRenderer.dispose();console.log(`Three.js export completed:${tempCanvas.width}x${tempCanvas.height}px`);return dataURL}console.warn('Three.js high-res export:falling back to canvas scaling');return this._fallbackScale(canvas,resolution)},_fallbackScale:function(canvas,resolution){const scaledCanvas = document.createElement('canvas');const ctx = scaledCanvas.getContext('2d');const targetWidth = canvas.width * resolution;const targetHeight = canvas.height * resolution;scaledCanvas.width = targetWidth;scaledCanvas.height = targetHeight;console.log(`Three.js fallback scaling:${canvas.width}x${canvas.height}-> ${targetWidth}x${targetHeight}(${resolution}x)`);ctx.imageSmoothingEnabled = true;ctx.imageSmoothingQuality = 'high';ctx.drawImage(canvas,0,0,targetWidth,targetHeight);return scaledCanvas.toDataURL('image/png')}},panorama:{export:function(canvas,options){console.warn('360° panorama export not yet implemented for Three.js canvas')}},webm:{export:function(canvas,options){console.warn('WebM video export not yet implemented for Three.js canvas')}},glb:{export:function(scene,options){console.warn('GLB model export not yet implemented for Three.js')}}};Chatooly.domExport ={export:function(element,options){const format = options.format || 'png';if(this[format]){this[format].export(element,options)}else{console.warn(`Chatooly:DOM export format '${format}' not supported`)}},png:{export:function(element,options){const filename = options.filename || Chatooly.utils.generateFilename(Chatooly.config,'png');if(typeof html2canvas === 'undefined'){Chatooly.domExport._loadHtml2Canvas().then(()=>{Chatooly.domExport.png._captureDOM(element,filename,options)}).catch(error =>{console.error('Chatooly:Failed to load html2canvas:',error);alert('PNG export failed:Could not load required library')})}else{this._captureDOM(element,filename,options)}},_captureDOM:function(element,filename,options){const resolution = options.resolution || Chatooly.config.resolution || 2;html2canvas(element,{scale:resolution,useCORS:true,allowTaint:false,backgroundColor:options.backgroundColor || null,width:options.width,height:options.height,scrollX:0,scrollY:0}).then(canvas =>{const dataURL = canvas.toDataURL('image/png');Chatooly.utils.downloadImage(dataURL,filename);console.log('Chatooly:DOM PNG exported successfully at ' + resolution + 'x resolution')}).catch(error =>{console.error('Chatooly:DOM PNG export failed:',error);alert('PNG export failed. Try exporting a specific element.')})}},jpeg:{export:function(element,options){console.warn('JPEG export not yet implemented for DOM elements')}},pdf:{export:function(element,options){console.warn('PDF export not yet implemented for DOM elements')}},svg:{export:function(element,options){console.warn('SVG export not yet implemented for DOM elements')}},_loadHtml2Canvas:function(){if(this._html2canvasPromise){return this._html2canvasPromise}this._html2canvasPromise = new Promise((resolve,reject)=>{const isLocalDev = Chatooly.utils ? Chatooly.utils.isDevelopment():(window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' || window.location.hostname === '::' || window.location.hostname === '[::1]' || window.location.protocol === 'file:');if(isLocalDev){console.warn('Chatooly:Running locally - html2canvas CDN may cause mixed content warnings. Consider serving over HTTPS.')}const cdnSources = [ 'https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js','https://unpkg.com/html2canvas@1.4.1/dist/html2canvas.min.js','https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js' ];const tryLoad =(sourceIndex)=>{if(sourceIndex >= cdnSources.length){reject(new Error('All CDN sources failed'));return}const script = document.createElement('script');script.src = cdnSources[sourceIndex];script.async = true;script.crossOrigin = 'anonymous';const cleanup =()=>{document.head.removeChild(script)};script.onload =()=>{cleanup();resolve()};script.onerror =()=>{cleanup();console.warn(`Chatooly:Failed to load html2canvas from ${cdnSources[sourceIndex]}`);tryLoad(sourceIndex + 1)};setTimeout(()=>{if(!window.html2canvas){cleanup();tryLoad(sourceIndex + 1)}},10000);document.head.appendChild(script)};tryLoad(0)});return this._html2canvasPromise}};Chatooly.pngExport ={export:function(target,options){if(target.type === 'canvas'){this._exportCanvas(target.element,options)}else{this._exportDOM(target.element,options)}},_exportCanvas:function(canvas,options){if(Chatooly.utils._isP5Canvas(canvas)){Chatooly.canvasExporters.p5.png.export(canvas,options)}else if(Chatooly.utils._isThreeCanvas(canvas)){Chatooly.canvasExporters.three.png.export(canvas,options)}else{Chatooly.canvasExporters.html5.png.export(canvas,options)}},_exportDOM:function(element,options){Chatooly.domExport.export(element,options)}};class AnimationExporter{constructor(config ={}){this.renderServiceUrl = config.renderServiceUrl || 'https://chatooly-render-service.onrender.com';this.maxDuration = config.maxDuration || 15;this.defaultDuration = config.defaultDuration || 5;this.timeout = config.timeout || 300000;this.libraryUrls ={'three':'https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.min.js','p5':'https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.7.0/p5.min.js','gsap':'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js'};this.libraryCache = new Map()}async exportAnimation(options ={}){try{const exportConfig = await this.showExportDialog(options);if(!exportConfig)return;this.showProgressModal();this.updateProgress(0,0,0,'Preparing animation...');this.updateProgress(10,0,0,'Capturing canvas and inlining libraries...');const{html,metadata}= await this.captureAnimationHTML(exportConfig);this.updateProgress(30,0,0,'Submitting to render service...');const downloadUrl = await this.submitRenderJob(html,exportConfig,metadata);this.downloadFile(downloadUrl);this.hideProgressModal()}catch(error){console.error('Animation export failed:',error);this.hideProgressModal();this.showError(error.message)}}async captureAnimationHTML(config){console.log('🔧 DEBUG:Starting captureAnimationHTML with config:',config);const canvas = document.getElementById('chatooly-canvas');const container = document.getElementById('chatooly-container');const allCanvases = document.querySelectorAll('canvas');const allContainers = document.querySelectorAll('[id*="container"]');console.log('🔧 DEBUG:DOM Analysis:',{targetCanvas:canvas ? `${canvas.width}x${canvas.height}`:'NOT FOUND',targetContainer:container ? 'FOUND':'NOT FOUND',allCanvasCount:allCanvases.length,allCanvases:Array.from(allCanvases).map(c =>({id:c.id,class:c.className,width:c.width,height:c.height,parent:c.parentElement?.id || c.parentElement?.className})),allContainers:Array.from(allContainers).map(c =>({id:c.id,class:c.className,children:c.children.length}))});let actualCanvas = canvas;if(!actualCanvas && allCanvases.length > 0){actualCanvas = Array.from(allCanvases).reduce((largest,current)=>{const largestSize =(largest.width || 0)*(largest.height || 0);const currentSize = current.width * current.height;return currentSize > largestSize ? current:largest});console.log('🔧 DEBUG:Using alternative canvas:',{id:actualCanvas.id,class:actualCanvas.className,size:`${actualCanvas.width}x${actualCanvas.height}`})}if(!actualCanvas){throw new Error('No canvas found on the page')}const isTransparent = config.transparent !== undefined ? config.transparent:this.detectCanvasTransparency(actualCanvas,container);const width = actualCanvas.width || 800;const height = actualCanvas.height || 600;console.log('🔧 DEBUG:Canvas info:',{width,height,isTransparent,canvasId:actualCanvas.id,canvasClass:actualCanvas.className});const minimalHTML = this.buildMinimalHTML(actualCanvas,container,width,height,isTransparent);console.log('🔧 DEBUG:Minimal HTML generated:',{size:minimalHTML.length,preview:minimalHTML.slice(0,500)+ '...'});const inlinedHTML = await this.inlineExternalLibraries(minimalHTML);console.log('🔧 DEBUG:After inlining libraries:',{size:inlinedHTML.length,sizeIncrease:inlinedHTML.length - minimalHTML.length});const compressedHTML = this.compressHTML(inlinedHTML);console.log('🔧 DEBUG:After compression:',{size:compressedHTML.length,compressionRatio:Math.round((1 - compressedHTML.length / inlinedHTML.length)* 100)+ '%'});const finalHTML = this.addRenderServiceIntegration(compressedHTML,{canvasId:'chatooly-canvas',transparent:isTransparent});console.log('🔧 DEBUG:Final HTML ready:',{size:finalHTML.length,preview:finalHTML.slice(0,300)+ '...'});return{html:finalHTML,metadata:{width,height,transparent:isTransparent,originalSize:minimalHTML.length,compressedSize:finalHTML.length}}}detectCanvasTransparency(canvas,container){try{if(container){const containerBg = getComputedStyle(container).backgroundColor;if(containerBg === 'transparent' || containerBg === 'rgba(0,0,0,0)'){return true}}const canvasBg = getComputedStyle(canvas).backgroundColor;if(canvasBg === 'transparent' || canvasBg === 'rgba(0,0,0,0)'){return true}const ctx = canvas.getContext('2d');const imageData = ctx.getImageData(0,0,1,1);const alpha = imageData.data[3];return alpha < 255}catch(e){console.warn('Could not detect transparency:',e);return false}}buildMinimalHTML(canvas,container,width,height,isTransparent){console.log('🔧 DEBUG:buildMinimalHTML starting with:',{width,height,isTransparent,originalCanvasId:canvas.id,originalCanvasClass:canvas.className});const minimalContainer = document.createElement('div');minimalContainer.id = 'chatooly-container';const canvasClone = document.createElement('canvas');canvasClone.id = canvas.id || 'chatooly-canvas';canvasClone.width = width;canvasClone.height = height;let canvasDataUrl = '';try{canvasDataUrl = canvas.toDataURL('image/png');console.log('🔧 DEBUG:Captured canvas state as data URL(length:',canvasDataUrl.length,')')}catch(e){console.log('🔧 DEBUG:Could not capture canvas state:',e.message)}minimalContainer.appendChild(canvasClone);console.log('🔧 DEBUG:Created minimal container with canvas:',{canvasId:canvasClone.id,canvasWidth:canvasClone.width,canvasHeight:canvasClone.height,hasDataUrl:!!canvasDataUrl});console.log('🔧 DEBUG:Minimal container HTML:',minimalContainer.outerHTML.slice(0,500)+ '...');const essentialScripts = [];const externalScripts = Array.from(document.querySelectorAll('script[src]'));console.log('🔧 DEBUG:Found total external scripts:',externalScripts.length);for(const script of externalScripts){const src = script.src;if(src &&(src.includes('three.min.js')|| src.includes('p5.min.js')|| src.includes('gsap')|| src.includes('animation-library')|| src.includes('matter.js')|| src.includes('anime.js')|| src.includes('/main.js')|| src.includes('/app.js')|| src.includes('/script.js'))){essentialScripts.push(`<script src="${src}"></script>`);console.log('🔧 DEBUG:Including script:',src)}else{console.log('🔧 DEBUG:Skipping external script:',src)}}const inlineScripts = Array.from(document.querySelectorAll('script:not([src])'));console.log('🔧 DEBUG:Found inline scripts:',inlineScripts.length);for(const script of inlineScripts){const content = script.innerHTML;const hasAnimation = content.includes('animate')|| content.includes('draw')|| content.includes('render')|| content.includes('requestAnimationFrame')|| content.includes('canvas')|| content.includes('ctx.')|| content.includes('context.');const hasUI = content.includes('chatooly-controls')|| content.includes('sidebar')|| content.includes('dialog')|| content.includes('modal')|| content.includes('button')|| content.includes('menu')|| content.length > 5000;if(hasAnimation && !hasUI){essentialScripts.push(`<script>${content}</script>`);console.log('🔧 DEBUG:Including animation script(length:',content.length,')')}else{console.log('🔧 DEBUG:Skipping inline script(UI or large:',content.length,')')}}const initScript = `<script> window.addEventListener('load',function(){console.log('Initializing canvas for render...');if(typeof init === 'function')init();if(typeof setup === 'function')setup();if(typeof start === 'function')start();if(typeof main === 'function')main();if(typeof draw === 'function')draw();if(typeof render === 'function')render();if(typeof animate === 'function')animate();if(typeof initStickers === 'function')initStickers();if(typeof loadStickers === 'function')loadStickers();console.log('Canvas initialization attempted')});</script>`;essentialScripts.push(initScript);const scripts = essentialScripts.join('\n');console.log('🔧 DEBUG:Final script count:',essentialScripts.length);const styles = '';console.log('🔧 DEBUG:Skipping all external styles to ensure minimal HTML');return `<!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width,initial-scale=1.0"> <title>Animation Export</title> <style> *{margin:0;padding:0;box-sizing:border-box}body{overflow:hidden;width:100vw;height:100vh;display:flex;justify-content:center;align-items:center;background:${isTransparent ? 'transparent':'#000'}}#chatooly-container{width:${width}px;height:${height}px;position:relative}#chatooly-canvas{display:block;width:100%;height:100%}</style> ${styles}</head> <body> ${minimalContainer.outerHTML}${scripts}</body> </html>`}async inlineExternalLibraries(html){try{const scriptPatterns = [{pattern:/https:\/\/cdn\.jsdelivr\.net\/npm\/three@[\d.]+\/build\/three\.min\.js/g,library:'three'},{pattern:/https:\/\/cdnjs\.cloudflare\.com\/ajax\/libs\/p5\.js\/[\d.]+\/p5\.min\.js/g,library:'p5'},{pattern:/https:\/\/cdnjs\.cloudflare\.com\/ajax\/libs\/gsap\/[\d.]+\/gsap\.min\.js/g,library:'gsap'}];for(const{pattern,library}of scriptPatterns){const matches = html.match(pattern);if(matches){console.log(`Found ${library}library,inlining...`);const libraryContent = await this.fetchLibrary(library);html = html.replace(new RegExp(`<script src="${pattern.source}"><\/script>`,'g'),`<script>\n${libraryContent}</script>`)}}return html}catch(error){console.warn('Failed to inline libraries,using original HTML:',error);return html}}async fetchLibrary(libraryName){if(this.libraryCache.has(libraryName)){console.log(`Using cached ${libraryName}library`);return this.libraryCache.get(libraryName)}const url = this.libraryUrls[libraryName];if(!url){throw new Error(`Unknown library:${libraryName}`)}console.log(`Fetching ${libraryName}from ${url}...`);try{const response = await fetch(url);if(!response.ok){throw new Error(`Failed to fetch ${libraryName}:${response.status}`)}const content = await response.text();this.libraryCache.set(libraryName,content);console.log(`Successfully fetched ${libraryName}(${Math.round(content.length / 1024)}KB)`);return content}catch(error){console.error(`Error fetching ${libraryName}:`,error);throw error}}compressHTML(html){return html .replace(/<!--[\s\S]*?-->/g,'').replace(/\s+/g,' ').replace(/>\s+</g,'><').replace(/^\s*\n/gm,'').trim()}addRenderServiceIntegration(html,config){const integrationScript = ` <script>(function(){let animationStartTime = Date.now();const originalRAF = window.requestAnimationFrame;let isControlledByRenderService = false;window.setAnimationTime = function(time){isControlledByRenderService = true;animationStartTime = Date.now()-(time * 1000);if(window.updateAnimation){window.updateAnimation(time)}if(window.rafCallbacks && window.rafCallbacks.length > 0){window.rafCallbacks.forEach(callback =>{callback(time * 1000)})}};window.rafCallbacks = [];window.requestAnimationFrame = function(callback){if(isControlledByRenderService){window.rafCallbacks.push(callback);return Date.now()}else{return originalRAF.call(window,callback)}};console.log('Chatooly Render Service integration loaded')})();</script> </body>`;return html.replace('</body>',integrationScript)}async submitRenderJob(html,config,metadata){const payload ={html:html,duration:config.duration,fps:30,width:metadata.width,height:metadata.height,resolution:1,transparent:metadata.transparent,toolName:'chatooly-cdn',exportFormat:config.format,videoQuality:'high',animationSpeed:1,perfectLoop:false,naturalPeriod:null};console.log('🔧 DEBUG:Submitting render job:',{format:payload.exportFormat,duration:payload.duration,size:`${metadata.width}x${metadata.height}`,transparent:payload.transparent,htmlSize:`${Math.round(html.length / 1024)}KB`});try{console.log('🔧 DEBUG:Sending HTML to debug endpoint...');const debugResponse = await fetch(`${this.renderServiceUrl}/debug/html`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({html:html,metadata:{...metadata,config}})});if(debugResponse.ok){const debugResult = await debugResponse.json();console.log('🔧 DEBUG:HTML stored for inspection:',{debugId:debugResult.debugId,previewUrl:`${this.renderServiceUrl}${debugResult.previewUrl}`,infoUrl:`${this.renderServiceUrl}/debug/info/${debugResult.debugId}`});console.log('🔧 DEBUG:You can inspect the HTML at:',`${this.renderServiceUrl}${debugResult.previewUrl}`)}}catch(debugError){console.warn('🔧 DEBUG:Failed to store HTML for debugging:',debugError.message)}const response = await fetch(`${this.renderServiceUrl}/render`,{method:'POST',headers:{'Content-Type':'application/json',},body:JSON.stringify(payload)});if(!response.ok){const error = await response.json().catch(()=>({}));throw new Error(error.error || `Render service error:${response.status}`)}const{jobId,totalFrames}= await response.json();console.log(`Render job created:${jobId}(${totalFrames}frames)`);return this.pollJobStatus(jobId)}async pollJobStatus(jobId){const pollInterval = 1000;const maxAttempts = this.timeout / pollInterval;for(let i = 0;i < maxAttempts;i++){const response = await fetch(`${this.renderServiceUrl}/status/${jobId}`);const status = await response.json();this.updateProgress(status.progress || 0,status.currentFrame || 0,status.totalFrames || 0);if(status.status === 'completed'){console.log('Render completed:',status);return `${this.renderServiceUrl}/download/${jobId}`}if(status.status === 'failed'){throw new Error(status.error || 'Rendering failed')}await new Promise(resolve => setTimeout(resolve,pollInterval))}throw new Error('Render timeout - job took too long to complete')}async showExportDialog(initialOptions ={}){return new Promise((resolve)=>{const modal = this.createExportModal(initialOptions,resolve);document.body.appendChild(modal)})}createExportModal(initialOptions,onComplete){const modal = document.createElement('div');modal.id = 'chatooly-export-modal';modal.className = 'chatooly-modal-overlay';modal.innerHTML = ` <div class="chatooly-modal"> <h3>Export Animation</h3> <div class="chatooly-modal-content"> <div class="chatooly-form-group"> <label for="export-duration">Duration(seconds)</label> <input type="number" id="export-duration" min="1" max="${this.maxDuration}" value="${initialOptions.duration || this.defaultDuration}" /> <small>Maximum:${this.maxDuration}seconds</small> </div> <div class="chatooly-form-group"> <label for="export-format">Format</label> <select id="export-format"> <option value="zip" selected>PNG Sequence(.zip)</option> <option value="webm" disabled>WebM Video(Coming Soon)</option> <option value="mov" disabled>MOV Video(Coming Soon)</option> </select> </div> <div class="chatooly-form-group"> <label> <input type="checkbox" id="export-transparent" ${initialOptions.transparent !== false ? 'checked':''}/> Transparent Background </label> <small>Auto-detected from canvas</small> </div> </div> <div class="chatooly-modal-actions"> <button type="button" class="chatooly-btn chatooly-btn-secondary" id="export-cancel-btn">Cancel</button> <button type="button" class="chatooly-btn chatooly-btn-primary" id="export-confirm-btn">Export</button> </div> </div> `;const cancelBtn = modal.querySelector('#export-cancel-btn');const confirmBtn = modal.querySelector('#export-confirm-btn');cancelBtn.addEventListener('click',()=>{modal.remove();onComplete(null)});confirmBtn.addEventListener('click',()=>{const durationInput = modal.querySelector('#export-duration');const formatInput = modal.querySelector('#export-format');const transparentInput = modal.querySelector('#export-transparent');if(!durationInput || !formatInput || !transparentInput){console.error('Export form inputs not found');return}const config ={duration:parseInt(durationInput.value)|| 5,format:formatInput.value || 'zip',transparent:transparentInput.checked};modal.remove();onComplete(config)});modal.style.setProperty('position','fixed','important');modal.style.setProperty('top','50%','important');modal.style.setProperty('left','50%','important');modal.style.setProperty('transform','translate(-50%,-50%)','important');modal.style.setProperty('z-index','999999','important');modal.style.setProperty('background','rgba(0,0,0,0.9)','important');modal.style.setProperty('padding','40px','important');modal.style.setProperty('border-radius','0px','important');return modal}showProgressModal(){const modal = document.createElement('div');modal.id = 'chatooly-progress-modal';modal.className = 'chatooly-modal-overlay';modal.innerHTML = ` <div class="chatooly-modal"> <h3>Exporting Animation...</h3> <div class="chatooly-progress-container"> <div class="chatooly-progress-bar"> <div class="chatooly-progress-fill" style="width:0%"></div> </div> <div class="chatooly-progress-text">Preparing...</div> </div> <div class="chatooly-modal-actions"> <button type="button" class="chatooly-btn chatooly-btn-secondary" id="progress-cancel-btn">Cancel</button> </div> </div> `;modal.style.setProperty('position','fixed','important');modal.style.setProperty('top','50%','important');modal.style.setProperty('left','50%','important');modal.style.setProperty('transform','translate(-50%,-50%)','important');modal.style.setProperty('z-index','999999','important');modal.style.setProperty('background','rgba(0,0,0,0.9)','important');modal.style.setProperty('padding','40px','important');modal.style.setProperty('border-radius','0px','important');document.body.appendChild(modal);const cancelBtn = modal.querySelector('#progress-cancel-btn');if(cancelBtn){cancelBtn.addEventListener('click',()=>{modal.remove()})}}updateProgress(percentage,currentFrame,totalFrames,statusMessage){const modal = document.getElementById('chatooly-progress-modal');if(!modal)return;const progressFill = modal.querySelector('.chatooly-progress-fill');const progressText = modal.querySelector('.chatooly-progress-text');if(progressFill && progressText){progressFill.style.width = percentage + '%';if(statusMessage){progressText.textContent = statusMessage}else if(currentFrame && totalFrames){progressText.textContent = `Frame ${currentFrame}/${totalFrames}(${Math.round(percentage)}%)`}else{progressText.textContent = `${Math.round(percentage)}%`}}}hideProgressModal(){const modal = document.getElementById('chatooly-progress-modal');if(modal){modal.remove()}}showError(message){alert(`Export failed:${message}\n\nPlease try again or contact support if the problem persists.`)}downloadFile(url){const link = document.createElement('a');link.href = url;link.download = `chatooly-animation-${Date.now()}`;document.body.appendChild(link);link.click();document.body.removeChild(link)}}if(typeof module !== 'undefined' && module.exports){module.exports = AnimationExporter}else{window.AnimationExporter = AnimationExporter}Chatooly.animationMediaRecorder ={mediaRecorder:null,recordedChunks:[],isRecording:false,recordingState:'idle',toolInfo:null,recordingCanvas:null,recordingCtx:null,drawingInterval:null,currentFileExtension:'mp4',init:function(){this.toolInfo = this.detectToolType();console.log('🎬 MediaRecorder Animation module initialized:',this.toolInfo)},detectToolType:function(){const canvas = document.getElementById('chatooly-canvas');if(!canvas){return{type:'static',framework:'none',reason:'No chatooly-canvas found'}}if(window.p5 && typeof window.setup === 'function' && typeof window.draw === 'function'){return{type:'animated',framework:'p5js',canvas:canvas,reason:'p5.js globals and draw()function detected'}}if(window.THREE){return{type:'animated',framework:'threejs',canvas:canvas,reason:'THREE.js library detected'}}if(canvas && canvas.getContext){const hasRequestAnimationFrame = window.requestAnimationFrame && document.body.innerHTML.includes('requestAnimationFrame');if(hasRequestAnimationFrame){return{type:'animated',framework:'canvas',canvas:canvas,reason:'Canvas with requestAnimationFrame detected'}}}return{type:'static',framework:'none',canvas:canvas,reason:'No animation framework detected'}},showExportDialog:function(){if(this.recordingState !== 'idle'){alert('Animation recording already in progress!');return}this.toolInfo = this.detectToolType();const dialog = this.createExportDialog();document.body.appendChild(dialog);setTimeout(()=> dialog.classList.add('show'),10)},createExportDialog:function(){const dialog = document.createElement('div');dialog.className = 'chatooly-modal-overlay';dialog.innerHTML = ` <div class="chatooly-modal"> <h3>🎬 Animation Export</h3> <div class="chatooly-modal-content"> <div class="chatooly-form-group"> <label for="anim-duration">Duration(seconds)</label> <input type="number" id="anim-duration" value="5" min="1" max="30" step="0.5"> <small>How long to record the animation</small> </div> <div class="chatooly-form-group"> <label for="anim-fps">Frame Rate(FPS)</label> <select id="anim-fps"> <option value="24">24 FPS(cinematic)</option> <option value="30" selected>30 FPS(standard)</option> <option value="60">60 FPS(smooth)</option> </select> <small>Higher FPS = smoother but larger files</small> </div> <div class="chatooly-form-group"> <label for="anim-format">Video Format</label> <select id="anim-format"> <option value="mp4" selected>MP4(H.264)- Best compatibility</option> <option value="webm-vp9">WebM(VP9)- Smaller files</option> <option value="webm-vp8">WebM(VP8)- Faster encoding</option> <option value="webm-h264">WebM(H.264)- Chrome only</option> <option value="mkv">MKV(Matroska)- Chrome only</option> <option value="auto">Auto-detect best format</option> </select> <small>MP4 works everywhere,WebM is smaller,Auto finds best option</small> </div> <div class="chatooly-p-3" style="background:rgba(102,126,234,0.05);border:1px solid rgba(102,126,234,0.1);border-radius:8px;margin-top:16px;"> <div class="chatooly-text-small chatooly-text-muted"> <strong style="color:#4a5568;">Detected:</strong> ${this.toolInfo.framework}animation<br> <strong style="color:#4a5568;">Export:</strong> MP4/WebM/MKV video(MediaRecorder API)</div> </div> </div> <div class="chatooly-modal-actions"> <button type="button" class="chatooly-btn chatooly-btn-secondary" onclick="Chatooly.animationMediaRecorder.closeExportDialog()">Cancel</button> <button type="button" class="chatooly-btn chatooly-btn-primary" onclick="Chatooly.animationMediaRecorder.startRecording()">Start Recording</button> </div> </div> `;return dialog},closeExportDialog:function(){const dialog = document.querySelector('.chatooly-modal-overlay');if(dialog){dialog.remove()}},startRecording:function(){const duration = parseFloat(document.getElementById('anim-duration').value);const fps = parseInt(document.getElementById('anim-fps').value);const format = document.getElementById('anim-format').value;console.log(`🎬 Starting ${duration}s recording at ${fps}FPS in ${format}format`);try{this.initializeMediaRecorder(fps,format);this.beginRecording(duration)}catch(error){console.error('Failed to start MediaRecorder:',error);alert('Failed to start recording. Please try again.')}},initializeMediaRecorder:function(fps,format){const canvas = this.toolInfo.canvas;if(!canvas){throw new Error('No canvas found for recording')}this.recordingCanvas = document.createElement('canvas');this.recordingCtx = this.recordingCanvas.getContext('2d');const scaleFactor = 2;this.recordingCanvas.width = canvas.width * scaleFactor;this.recordingCanvas.height = canvas.height * scaleFactor;this.recordingCtx.scale(scaleFactor,scaleFactor);const stream = this.recordingCanvas.captureStream(fps);let mimeType,fileExtension;if(format === 'auto'){const formatPriority = [{mime:'video/mp4;codecs=avc1.42E01E',ext:'mp4',name:'MP4 H.264'},{mime:'video/webm;codecs=vp9',ext:'webm',name:'WebM VP9'},{mime:'video/webm;codecs=vp8',ext:'webm',name:'WebM VP8'},{mime:'video/webm',ext:'webm',name:'WebM Default'},{mime:'video/mp4',ext:'mp4',name:'MP4 Default'}];for(const fmt of formatPriority){if(MediaRecorder.isTypeSupported(fmt.mime)){mimeType = fmt.mime;fileExtension = fmt.ext;console.log(`Auto-detected best format:${fmt.name}(${fmt.mime})`);break}}if(!mimeType){throw new Error('No supported video formats found in this browser')}}else if(format === 'mp4'){const compatibleMP4Codecs = [ 'video/mp4;codecs=avc1.42E01E','video/mp4;codecs=avc1.42001E','video/mp4;codecs=h264,aac','video/mp4;codecs=h264','video/mp4' ];for(const codec of compatibleMP4Codecs){if(MediaRecorder.isTypeSupported(codec)){mimeType = codec;fileExtension = 'mp4';console.log(`Using MP4 codec:${codec}`);break}}if(!mimeType){throw new Error('MP4 format not supported in this browser')}}else if(format === 'webm-vp9'){const webmVP9Codecs = [ 'video/webm;codecs=vp9,opus','video/webm;codecs=vp9','video/webm' ];for(const codec of webmVP9Codecs){if(MediaRecorder.isTypeSupported(codec)){mimeType = codec;fileExtension = 'webm';console.log(`Using WebM VP9 codec:${codec}`);break}}if(!mimeType){throw new Error('WebM VP9 format not supported in this browser')}}else if(format === 'webm-vp8'){const webmVP8Codecs = [ 'video/webm;codecs=vp8,opus','video/webm;codecs=vp8','video/webm' ];for(const codec of webmVP8Codecs){if(MediaRecorder.isTypeSupported(codec)){mimeType = codec;fileExtension = 'webm';console.log(`Using WebM VP8 codec:${codec}`);break}}if(!mimeType){throw new Error('WebM VP8 format not supported in this browser')}}else if(format === 'webm-h264'){const webmH264Codecs = [ 'video/webm;codecs=h264,opus','video/webm;codecs=h264','video/webm' ];for(const codec of webmH264Codecs){if(MediaRecorder.isTypeSupported(codec)){mimeType = codec;fileExtension = 'webm';console.log(`Using WebM H.264 codec:${codec}`);break}}if(!mimeType){throw new Error('WebM H.264 format not supported in this browser')}}else if(format === 'mkv'){const mkvCodecs = [ 'video/x-matroska;codecs=avc1','video/x-matroska' ];for(const codec of mkvCodecs){if(MediaRecorder.isTypeSupported(codec)){mimeType = codec;fileExtension = 'mkv';console.log(`Using MKV codec:${codec}`);break}}if(!mimeType){throw new Error('MKV format not supported in this browser')}}this.currentFileExtension = fileExtension;const recordingOptions ={mimeType:mimeType,videoBitsPerSecond:6000000};this.mediaRecorder = new MediaRecorder(stream,recordingOptions);this.recordedChunks = [];this.mediaRecorder.ondataavailable =(event)=>{if(event.data.size > 0){this.recordedChunks.push(event.data)}};this.mediaRecorder.onstop =()=>{this.saveRecording();this.cleanup()};console.log('📹 MediaRecorder initialized:',{format:fileExtension,framerate:fps,canvas:canvas,mimeType:mimeType})},beginRecording:function(duration){if(!this.mediaRecorder){console.error('MediaRecorder not initialized');return}this.recordingState = 'starting';this.isRecording = true;this.mediaRecorder.start();this.updateRecordingUI();this.setupFrameCapture();setTimeout(()=>{this.stopRecording()},duration * 1000);console.log('🎬 Recording started')},setupFrameCapture:function(){const framework = this.toolInfo.framework;if(framework === 'p5js'){this.setupP5Capture()}else if(framework === 'threejs'){this.setupThreeJSCapture()}else if(framework === 'canvas'){this.setupCanvasCapture()}else{console.warn('Unknown framework,using generic capture');this.setupGenericCapture()}},setupP5Capture:function(){console.log('🎯 Setting up p5.js MediaRecorder capture');this.drawingInterval = setInterval(()=>{this.captureCanvasToRecordingCanvas()},1000 / 60);this.cleanupCapture =()=>{if(this.drawingInterval){clearInterval(this.drawingInterval);this.drawingInterval = null}}},setupThreeJSCapture:function(){console.log('🎯 Setting up Three.js MediaRecorder capture');this.drawingInterval = setInterval(()=>{this.captureCanvasToRecordingCanvas()},1000 / 60);this.cleanupCapture =()=>{if(this.drawingInterval){clearInterval(this.drawingInterval);this.drawingInterval = null}}},setupCanvasCapture:function(){console.log('🎯 Setting up Canvas API MediaRecorder capture');this.drawingInterval = setInterval(()=>{this.captureCanvasToRecordingCanvas()},1000 / 60);this.cleanupCapture =()=>{if(this.drawingInterval){clearInterval(this.drawingInterval);this.drawingInterval = null}}},setupGenericCapture:function(){console.log('🎯 Setting up generic MediaRecorder capture');this.drawingInterval = setInterval(()=>{this.captureCanvasToRecordingCanvas()},1000 / 30);this.cleanupCapture =()=>{if(this.drawingInterval){clearInterval(this.drawingInterval);this.drawingInterval = null}}},captureCanvasToRecordingCanvas:function(){try{const sourceCanvas = this.toolInfo.canvas;if(!sourceCanvas)return;this.recordingCtx.fillStyle = '#1a1a1a';this.recordingCtx.fillRect(0,0,sourceCanvas.width,sourceCanvas.height);if(sourceCanvas.width > 0 && sourceCanvas.height > 0){this.recordingCtx.drawImage(sourceCanvas,0,0,sourceCanvas.width,sourceCanvas.height)}}catch(error){console.error('❌ Error capturing canvas:',error)}},stopRecording:function(){if(!this.mediaRecorder || !this.isRecording){return}this.recordingState = 'stopping';console.log('🛑 Stopping recording...');this.mediaRecorder.stop()},saveRecording:function(){try{let blobMimeType;if(this.currentFileExtension === 'mp4'){blobMimeType = 'video/mp4'}else if(this.currentFileExtension === 'webm'){blobMimeType = 'video/webm'}else if(this.currentFileExtension === 'mkv'){blobMimeType = 'video/x-matroska'}else{blobMimeType = 'video/webm'}const blob = new Blob(this.recordedChunks,{type:blobMimeType});const url = URL.createObjectURL(blob);const a = document.createElement('a');a.href = url;a.download = `animation-${Date.now()}.${this.currentFileExtension}`;document.body.appendChild(a);a.click();document.body.removeChild(a);URL.revokeObjectURL(url);this.recordedChunks = [];console.log(`✅ Animation saved as ${this.currentFileExtension.toUpperCase()}`)}catch(error){console.error('❌ Error saving recording:',error);alert('Error saving recording:' + error.message)}},cleanup:function(){if(this.cleanupCapture){this.cleanupCapture();this.cleanupCapture = null}this.mediaRecorder = null;this.isRecording = false;this.recordingState = 'idle';this.recordingCanvas = null;this.recordingCtx = null;this.resetRecordingUI();this.closeExportDialog();console.log('🧹 Recording cleanup completed')},updateRecordingUI:function(){const startBtn = document.querySelector('.chatooly-btn-primary');if(startBtn){startBtn.textContent = 'Exporting...';startBtn.disabled = true;startBtn.style.opacity = '0.6'}const indicator = document.createElement('div');indicator.className = 'chatooly-export-indicator';indicator.innerHTML = '📤 Exporting...';indicator.style.cssText = ` position:fixed;top:var(--chatooly-spacing-4,20px);right:var(--chatooly-spacing-4,20px);background:var(--chatooly-color-primary,#007acc);color:var(--chatooly-color-text-inverse,white);padding:var(--chatooly-spacing-3,12px)var(--chatooly-spacing-4,16px);border-radius:var(--chatooly-border-radius-lg,20px);font-size:var(--chatooly-font-size-sm,14px);font-weight:var(--chatooly-font-weight-semibold,600);font-family:var(--chatooly-font-family,-apple-system,BlinkMacSystemFont,'Segoe UI',sans-serif);box-shadow:var(--chatooly-shadow-lg,0 10px 25px rgba(0,0,0,0.15));z-index:100000;animation:chatooly-pulse 1.5s ease-in-out infinite;`;if(!document.querySelector('#chatooly-export-animation')){const style = document.createElement('style');style.id = 'chatooly-export-animation';style.textContent = ` @keyframes chatooly-pulse{0%,100%{opacity:1;transform:scale(1)}50%{opacity:0.8;transform:scale(1.05)}}`;document.head.appendChild(style)}document.body.appendChild(indicator)},resetRecordingUI:function(){const startBtn = document.querySelector('.chatooly-btn-primary');if(startBtn){startBtn.textContent = 'Export';startBtn.disabled = false;startBtn.style.opacity = '1'}const indicator = document.querySelector('.chatooly-export-indicator');if(indicator){indicator.remove()}}};Chatooly.canvasArea ={areaContainer:null,canvasElement:null,config:{position:'full',padding:20,backgroundColor:'#f5f5f5',borderColor:'#ddd'},dragState:{isDragging:false,startX:0,startY:0,scrollStartX:0,scrollStartY:0},init:function(userConfig){if(userConfig){Object.assign(this.config,userConfig)}this.createContainer();this.detectCanvas();console.log('Chatooly:Canvas area initialized')},createContainer:function(){const templateContainer = document.getElementById('chatooly-container');const previewPanel = document.querySelector('.chatooly-preview-panel');if(templateContainer){this.areaContainer = templateContainer;this.previewPanel = previewPanel;console.log('Chatooly:Using template chatooly-container with preview panel')}else{console.error('Chatooly:No chatooly-container found in template. Please use the correct template structure.');console.error('Required structure:<div id="chatooly-container"><canvas id="chatooly-canvas"></canvas></div>');this.areaContainer = null;return}this.applyContainerStyles();this.injectStyles()},applyContainerStyles:function(){if(!this.areaContainer)return;if(this.previewPanel){let containerStyles ={position:'relative',display:'flex',alignItems:'center',justifyContent:'center',boxSizing:'border-box',width:'100%',height:'100%',overflow:'auto'};Object.assign(this.areaContainer.style,containerStyles);if(this.previewPanel){this.previewPanel.style.display = 'flex';this.previewPanel.style.alignItems = 'center';this.previewPanel.style.justifyContent = 'center'}}else{let styles ={position:'fixed',backgroundColor:this.config.backgroundColor,border:`1px solid ${this.config.borderColor}`,overflow:'auto',display:'flex',alignItems:'center',justifyContent:'center',zIndex:'1',boxSizing:'border-box'};const sidebar = document.querySelector('.chatooly-controls-panel')|| document.querySelector('.tools-sidebar');let sidebarWidth = 0;if(sidebar){const sidebarStyle = window.getComputedStyle(sidebar);sidebarWidth = sidebar.offsetWidth + parseInt(sidebarStyle.marginLeft || 0)+ parseInt(sidebarStyle.marginRight || 0)}styles.top = '60px';styles.left = sidebarWidth + 'px';styles.right = '0';styles.bottom = '60px';Object.assign(this.areaContainer.style,styles)}},injectStyles:function(){if(document.getElementById('chatooly-canvas-area-styles')){return}const style = document.createElement('style');style.id = 'chatooly-canvas-area-styles';style.textContent = ` #chatooly-container,#chatooly-canvas-area{box-sizing:border-box;transition:all 0.3s ease}.chatooly-preview-panel{display:flex !important;align-items:center !important;justify-content:center !important}#chatooly-container{display:flex !important;align-items:center !important;justify-content:center !important;width:100%;height:100%}#chatooly-container canvas,#chatooly-canvas-area canvas{display:block;margin:0;max-width:100%;max-height:100%;object-fit:contain;image-rendering:crisp-edges;image-rendering:-moz-crisp-edges;image-rendering:-webkit-crisp-edges;image-rendering:pixelated;flex-shrink:0}#chatooly-container.zoomed,#chatooly-canvas-area.zoomed{overflow:auto;cursor:grab}#chatooly-container.zoomed.dragging,#chatooly-canvas-area.zoomed.dragging{cursor:grabbing;user-select:none}#chatooly-container::-webkit-scrollbar,#chatooly-canvas-area::-webkit-scrollbar{width:12px;height:12px}#chatooly-container::-webkit-scrollbar-track,#chatooly-canvas-area::-webkit-scrollbar-track{background:#f1f1f1;border-radius:6px}#chatooly-container::-webkit-scrollbar-thumb,#chatooly-canvas-area::-webkit-scrollbar-thumb{background:#888;border-radius:6px}#chatooly-container::-webkit-scrollbar-thumb:hover,#chatooly-canvas-area::-webkit-scrollbar-thumb:hover{background:#555}#chatooly-container .zoom-indicator,#chatooly-canvas-area .zoom-indicator{position:absolute;top:10px;right:10px;background:rgba(0,0,0,0.7);color:white;padding:5px 10px;border-radius:4px;font-family:monospace;font-size:12px;pointer-events:none;z-index:10}#chatooly-container[data-fit="contain"] canvas,#chatooly-canvas-area[data-fit="contain"] canvas{width:100%;height:100%;object-fit:contain}#chatooly-container[data-fit="cover"] canvas,#chatooly-canvas-area[data-fit="cover"] canvas{width:100%;height:100%;object-fit:cover}#chatooly-container[data-fit="actual"] canvas,#chatooly-canvas-area[data-fit="actual"] canvas{width:auto;height:auto;max-width:none;max-height:none}`;document.head.appendChild(style)},detectCanvas:function(){this.canvasElement = this.areaContainer.querySelector('canvas');if(this.canvasElement){this.setupCanvas();return}const existingCanvas = document.querySelector('canvas#chatooly-canvas')|| document.querySelector('canvas');if(existingCanvas){this.moveCanvasToArea(existingCanvas)}else{this.observeForCanvas()}},moveCanvasToArea:function(canvas){this.canvasElement = canvas;if(!canvas.id){canvas.id = 'chatooly-canvas'}if(canvas.parentElement === this.areaContainer){console.log('Chatooly:Canvas already in correct container(no move needed)')}else{this.areaContainer.appendChild(canvas);console.log('Chatooly:Canvas moved to canvas area')}this.setupCanvas()},setupCanvas:function(){if(!this.canvasElement)return;this.canvasElement.style.position = 'static';this.canvasElement.style.transform = '';this.canvasElement.style.left = '';this.canvasElement.style.top = '';this.canvasElement.style.margin = '0';this.originalWidth = this.canvasElement.width;this.originalHeight = this.canvasElement.height;this.fitCanvasToArea();this.setupDragToScroll();this.setupResizeListener();if(Chatooly.canvasZoom){Chatooly.canvasZoom.setCanvasArea(this.areaContainer,this.canvasElement)}console.log(`Chatooly:Canvas setup complete - ${this.originalWidth}x${this.originalHeight}`)},observeForCanvas:function(){const observer = new MutationObserver((mutations)=>{for(let mutation of mutations){for(let node of mutation.addedNodes){if(node.tagName === 'CANVAS'){observer.disconnect();this.moveCanvasToArea(node);return}}}});observer.observe(document.body,{childList:true,subtree:true});setTimeout(()=>{observer.disconnect();console.warn('Chatooly:No canvas detected after 5 seconds')},5000)},fitCanvasToArea:function(){if(!this.canvasElement || !this.areaContainer)return;const areaRect = this.areaContainer.getBoundingClientRect();const padding = this.config.padding * 2;const availableWidth = areaRect.width - padding;const availableHeight = areaRect.height - padding;const scaleX = availableWidth / this.originalWidth;const scaleY = availableHeight / this.originalHeight;const scale = Math.min(scaleX,scaleY,1);const displayWidth = this.originalWidth * scale;const displayHeight = this.originalHeight * scale;this.canvasElement.style.width = displayWidth + 'px';this.canvasElement.style.height = displayHeight + 'px';this.displayWidth = displayWidth;this.displayHeight = displayHeight;console.log(`Chatooly:Canvas fitted to area - Display:${Math.round(displayWidth)}x${Math.round(displayHeight)}`)},setExportResolution:function(width,height){if(!this.canvasElement)return;this.canvasElement.width = width;this.canvasElement.height = height;this.exportWidth = width;this.exportHeight = height;this.originalWidth = width;this.originalHeight = height;this.fitCanvasToArea();this.triggerRedraw();console.log(`Chatooly:Export resolution set to ${width}x${height}`)},getDimensions:function(){return{display:{width:this.displayWidth || 0,height:this.displayHeight || 0},export:{width:this.exportWidth || this.originalWidth || 0,height:this.exportHeight || this.originalHeight || 0},canvas:{width:this.canvasElement ? this.canvasElement.width:0,height:this.canvasElement ? this.canvasElement.height:0}}},enableZoomMode:function(enabled){if(this.areaContainer){if(enabled){this.areaContainer.classList.add('zoomed')}else{this.areaContainer.classList.remove('zoomed');this.areaContainer.scrollLeft = 0;this.areaContainer.scrollTop = 0}}},centerCanvas:function(){if(!this.areaContainer || !this.canvasElement)return;if(this.previewPanel){this.previewPanel.style.display = 'flex';this.previewPanel.style.alignItems = 'center';this.previewPanel.style.justifyContent = 'center'}this.areaContainer.style.display = 'flex';this.areaContainer.style.alignItems = 'center';this.areaContainer.style.justifyContent = 'center';const areaWidth = this.areaContainer.clientWidth;const areaHeight = this.areaContainer.clientHeight;const canvasWidth = this.canvasElement.offsetWidth;const canvasHeight = this.canvasElement.offsetHeight;if(canvasWidth > areaWidth || canvasHeight > areaHeight){const scrollLeft = Math.max(0,(canvasWidth - areaWidth)/ 2);const scrollTop = Math.max(0,(canvasHeight - areaHeight)/ 2);this.areaContainer.scrollTo({left:scrollLeft,top:scrollTop,behavior:'smooth'});console.log(`Chatooly:Canvas centered via scroll - ${Math.round(scrollLeft)},${Math.round(scrollTop)}`)}else{this.areaContainer.scrollTo({left:0,top:0,behavior:'smooth'});console.log('Chatooly:Canvas centered via flexbox(fits in area)')}},triggerRedraw:function(){if(window.redraw && typeof window.redraw === 'function'){window.redraw()}if(window.renderer && window.renderer.render && window.scene && window.camera){window.renderer.render(window.scene,window.camera)}if(window.chatoolyRedraw && typeof window.chatoolyRedraw === 'function'){window.chatoolyRedraw()}const event = new CustomEvent('chatooly:canvas-resized',{detail:this.getDimensions(),bubbles:true});document.dispatchEvent(event)},setupDragToScroll:function(){if(!this.areaContainer)return;this.areaContainer.addEventListener('mousedown',(e)=>{if(e.target === this.areaContainer || e.target === this.canvasElement){this.startDrag(e.clientX,e.clientY)}});document.addEventListener('mousemove',(e)=>{if(this.dragState.isDragging){this.updateDrag(e.clientX,e.clientY)}});document.addEventListener('mouseup',()=>{this.endDrag()});this.areaContainer.addEventListener('touchstart',(e)=>{if(e.touches.length === 1){const touch = e.touches[0];this.startDrag(touch.clientX,touch.clientY)}},{passive:true});this.areaContainer.addEventListener('touchmove',(e)=>{if(e.touches.length === 1 && this.dragState.isDragging){e.preventDefault();const touch = e.touches[0];this.updateDrag(touch.clientX,touch.clientY)}},{passive:false});this.areaContainer.addEventListener('touchend',()=>{this.endDrag()})},startDrag:function(clientX,clientY){this.dragState.isDragging = true;this.dragState.startX = clientX;this.dragState.startY = clientY;this.dragState.scrollStartX = this.areaContainer.scrollLeft;this.dragState.scrollStartY = this.areaContainer.scrollTop;this.areaContainer.classList.add('dragging')},updateDrag:function(clientX,clientY){if(!this.dragState.isDragging)return;const deltaX = this.dragState.startX - clientX;const deltaY = this.dragState.startY - clientY;this.areaContainer.scrollLeft = this.dragState.scrollStartX + deltaX;this.areaContainer.scrollTop = this.dragState.scrollStartY + deltaY},endDrag:function(){if(this.dragState.isDragging){this.dragState.isDragging = false;this.areaContainer.classList.remove('dragging')}},updateConfig:function(newConfig){Object.assign(this.config,newConfig);this.applyContainerStyles()},setupResizeListener:function(){let resizeTimeout;window.addEventListener('resize',()=>{clearTimeout(resizeTimeout);resizeTimeout = setTimeout(()=>{this.applyContainerStyles();this.fitCanvasToArea()},250)})},resetZoomAndCenter:function(){if(Chatooly.canvasZoom){Chatooly.canvasZoom.resetZoom()}setTimeout(()=>{this.centerCanvas()},100)},destroy:function(){if(this.areaContainer){this.areaContainer.remove()}const styles = document.getElementById('chatooly-canvas-area-styles');if(styles){styles.remove()}this.areaContainer = null;this.canvasElement = null}};Chatooly.canvasResizer ={exportWidth:800,exportHeight:600,setExportSize:function(width,height){const widthInput = document.getElementById('chatooly-canvas-width');const heightInput = document.getElementById('chatooly-canvas-height');if(widthInput)widthInput.value = width;if(heightInput)heightInput.value = height;this.applyExportSize()},applyExportSize:function(){const widthInput = document.getElementById('chatooly-canvas-width');const heightInput = document.getElementById('chatooly-canvas-height');if(!widthInput || !heightInput){console.warn('Chatooly:Canvas size inputs not found');return}const width = parseInt(widthInput.value)|| 800;const height = parseInt(heightInput.value)|| 600;if(width < 100 || width > 4000 || height < 100 || height > 4000){alert('Export dimensions must be between 100 and 4000 pixels');return}this.exportWidth = width;this.exportHeight = height;Chatooly.config.canvasWidth = width;Chatooly.config.canvasHeight = height;if(Chatooly.canvasArea){Chatooly.canvasArea.setExportResolution(width,height)}else{const target = Chatooly.utils.detectExportTarget();if(target.element){this.applyLegacyResize(target,width,height)}}console.log(`Chatooly:Export resolution set to ${width}x${height}`);const menu = document.querySelector('.chatooly-btn-menu');if(menu && Chatooly.ui && Chatooly.ui._hideMenu){Chatooly.ui._hideMenu(menu)}},applySize:function(){this.applyExportSize()},applyLegacyResize:function(target,exportWidth,exportHeight){const element = target.element;if(target.type === 'canvas'){this._resizeCanvasDirectly(element,exportWidth,exportHeight)}else{this._resizeDOMElement(element,exportWidth,exportHeight)}},_resizeCanvasDirectly:function(canvas,exportWidth,exportHeight){const parent = canvas.parentElement;let useContainerPosition = false;if(parent && parent.tagName === 'DIV' && parent !== document.body){useContainerPosition = true;if(parent.style.position === '' || parent.style.position === 'static'){parent.style.position = 'relative'}}let availableWidth,availableHeight;if(useContainerPosition && parent){const parentRect = parent.getBoundingClientRect();availableWidth = parentRect.width || window.innerWidth - 100;availableHeight = parentRect.height || window.innerHeight - 200}else{const viewportWidth = window.innerWidth;const viewportHeight = window.innerHeight;const uiOffset ={top:60,right:100,bottom:60,left:60};availableWidth = viewportWidth - uiOffset.left - uiOffset.right;availableHeight = viewportHeight - uiOffset.top - uiOffset.bottom}const scale = Math.min(availableWidth / exportWidth,availableHeight / exportHeight,1);const displayWidth = exportWidth * scale;const displayHeight = exportHeight * scale;if(useContainerPosition){canvas.style.position = 'relative';canvas.style.top = '0';canvas.style.left = '0';canvas.style.margin = 'auto';canvas.style.display = 'block'}else{canvas.style.position = 'fixed';canvas.style.top = '50%';canvas.style.left = '50%';canvas.style.transform = 'translate(-50%,-50%)'}canvas.style.width = displayWidth + 'px';canvas.style.height = displayHeight + 'px';canvas.style.zIndex = '1';if(canvas.width !== exportWidth || canvas.height !== exportHeight){canvas.width = exportWidth;canvas.height = exportHeight;console.log(`Chatooly:Canvas resolution set to ${exportWidth}x${exportHeight}px(export quality)`);this._triggerRedraw();this._dispatchResizeEvent(displayWidth,displayHeight);if(Chatooly.canvasZoom){Chatooly.canvasZoom.onCanvasResize(displayWidth,displayHeight)}}console.log(`Chatooly:Canvas display set to ${Math.round(displayWidth)}x${Math.round(displayHeight)}px,export at ${exportWidth}x${exportHeight}px`)},_resizeDOMElement:function(element,exportWidth,exportHeight){let container = this._findContainer(element);if(!container){console.log('Chatooly:No container found,using viewport for scaling');container = this._createOrGetViewportContainer(element)}this._maximizeContainer(container);requestAnimationFrame(()=>{container.offsetHeight;const displayDimensions = this._calculateDisplayDimensions(container,exportWidth,exportHeight);this._applyDomDimensions(element,displayDimensions,exportWidth,exportHeight);console.log(`Chatooly:DOM element scaled - Display:${Math.round(displayDimensions.width)}x${Math.round(displayDimensions.height)},Export:${exportWidth}x${exportHeight}`)})},_findContainer:function(element){let container = element.parentElement;if(!container || container.id !== 'chatooly-canvas'){while(container && container.id !== 'chatooly-canvas'){container = container.parentElement}}return container},_createOrGetViewportContainer:function(element){let container = document.getElementById('chatooly-viewport-container');if(!container){container = document.createElement('div');container.id = 'chatooly-viewport-container';container.style.cssText = ` position:fixed;top:0;left:0;right:0;bottom:0;z-index:1;pointer-events:none;display:flex;align-items:center;justify-content:center;padding:20px;`;if(element.parentElement){return element.parentElement}document.body.appendChild(container)}return container},_maximizeContainer:function(container){if(container.id === 'chatooly-viewport-container' || container === document.body){console.log('Chatooly:Skipping container maximization(viewport container or body)');return}if(container.id === 'chatooly-canvas'){const beforeRect = container.getBoundingClientRect();const uiOffset ={top:20,right:100,bottom:100,left:20};const sidebar = document.querySelector('.chatooly-sidebar,.sidebar,aside');if(sidebar && sidebar.offsetWidth > 0){uiOffset.left = Math.max(sidebar.offsetWidth + 20,uiOffset.left)}container.style.position = container.style.position || 'relative';container.style.width = `calc(100vw - ${uiOffset.left + uiOffset.right}px)`;container.style.height = `calc(100vh - ${uiOffset.top + uiOffset.bottom}px)`;container.style.maxWidth = '100%';container.style.maxHeight = '100%';container.style.margin = 'auto';console.log(`Chatooly:Container maximized from ${Math.round(beforeRect.width)}x${Math.round(beforeRect.height)}to viewport size`)}else{console.log(`Chatooly:Container maximization skipped(not chatooly-canvas):${container.id || container.className}`)}},_calculateDisplayDimensions:function(container,exportWidth,exportHeight){const containerRect = container.getBoundingClientRect();const padding = 10;const availableWidth = Math.max(containerRect.width - padding,200);const availableHeight = Math.max(containerRect.height - padding,200);console.log(`Chatooly:Container available space:${Math.round(containerRect.width)}x${Math.round(containerRect.height)}-> ${Math.round(availableWidth)}x${Math.round(availableHeight)}(after padding)`);const scale = Math.min(availableWidth / exportWidth,availableHeight / exportHeight);const result ={width:exportWidth * scale,height:exportHeight * scale,scale:scale};console.log(`Chatooly:Canvas sized to maintain aspect ratio:${Math.round(result.width)}x${Math.round(result.height)}display(${scale.toFixed(3)}x scale),${exportWidth}x${exportHeight}export`);return result},_applyCanvasDimensions:function(canvas,displayDimensions,exportWidth,exportHeight){canvas.style.width = displayDimensions.width + 'px';canvas.style.height = displayDimensions.height + 'px';canvas.style.maxWidth = 'none';canvas.style.maxHeight = 'none';canvas.style.display = 'block';canvas.style.margin = '0';canvas.style.objectFit = 'fill';console.log(`Chatooly:Canvas display set to EXACT size:${displayDimensions.width}x${displayDimensions.height}px(perfect aspect ratio)`);if(canvas.width !== exportWidth || canvas.height !== exportHeight){canvas.width = exportWidth;canvas.height = exportHeight;console.log(`Chatooly:Canvas resolution set to ${exportWidth}x${exportHeight}px(export quality)`);this._triggerRedraw();this._dispatchResizeEvent(displayDimensions.width,displayDimensions.height);if(Chatooly.canvasZoom){Chatooly.canvasZoom.onCanvasResize(displayDimensions.width,displayDimensions.height)}}if(canvas.parentElement && canvas.parentElement.id === 'chatooly-canvas'){canvas.parentElement.style.display = 'flex';canvas.parentElement.style.alignItems = 'center';canvas.parentElement.style.justifyContent = 'center';canvas.parentElement.style.padding = '5px';canvas.parentElement.style.overflow = 'hidden'}},_applyDomDimensions:function(element,displayDimensions,exportWidth,exportHeight){element.style.width = displayDimensions.width + 'px';element.style.height = displayDimensions.height + 'px';element.dataset.exportWidth = exportWidth;element.dataset.exportHeight = exportHeight},_triggerRedraw:function(){if(window.redraw && typeof window.redraw === 'function'){window.redraw()}if(window.renderer && window.renderer.render && window.scene && window.camera){window.renderer.render(window.scene,window.camera)}if(window.chatoolyRedraw && typeof window.chatoolyRedraw === 'function'){window.chatoolyRedraw()}},_dispatchResizeEvent:function(displayWidth,displayHeight){const target = Chatooly.utils.detectExportTarget();let canvasWidth = this.exportWidth;let canvasHeight = this.exportHeight;if(target.type === 'canvas' && target.element){canvasWidth = target.element.width;canvasHeight = target.element.height}const eventDetail ={display:{width:displayWidth,height:displayHeight},canvas:{width:canvasWidth,height:canvasHeight},scale:{x:canvasWidth / displayWidth,y:canvasHeight / displayHeight},mapMouseEvent:function(mouseEvent){const rect = target.element ? target.element.getBoundingClientRect():{left:0,top:0};const displayX = mouseEvent.clientX - rect.left;const displayY = mouseEvent.clientY - rect.top;return{canvasX:displayX *(canvasWidth / displayWidth),canvasY:displayY *(canvasHeight / displayHeight),displayX:displayX,displayY:displayY}}};const event = new CustomEvent('chatooly:canvas-resized',{detail:eventDetail,bubbles:true});document.dispatchEvent(event);console.log(`Chatooly:Canvas resized - Display:${displayWidth}x${displayHeight},Canvas:${canvasWidth}x${canvasHeight}`)},getCurrentDimensions:function(){if(Chatooly.canvasArea){const dims = Chatooly.canvasArea.getDimensions();return{width:dims.export.width || this.exportWidth,height:dims.export.height || this.exportHeight}}const target = Chatooly.utils.detectExportTarget();if(!target.element)return{width:this.exportWidth,height:this.exportHeight};if(target.type === 'canvas'){return{width:target.element.width || this.exportWidth,height:target.element.height || this.exportHeight}}else if(target.type === 'dom'){return{width:parseInt(target.element.dataset.exportWidth)|| this.exportWidth,height:parseInt(target.element.dataset.exportHeight)|| this.exportHeight}}return{width:this.exportWidth,height:this.exportHeight}},presets:{HD:{width:1920,height:1080},Square:{width:1200,height:1200},FourThree:{width:800,height:600},Portrait:{width:1080,height:1920},Instagram:{width:1080,height:1080},TwitterCard:{width:1200,height:675},FacebookCover:{width:1200,height:630}},applyPreset:function(presetName){const preset = this.presets[presetName];if(preset){this.setExportSize(preset.width,preset.height)}else{console.warn(`Chatooly:Preset '${presetName}' not found`)}}};Chatooly.canvasZoom ={currentZoom:1.0,minZoom:0.1,maxZoom:10.0,zoomStep:0.1,panX:0,panY:0,isPanning:false,lastPanPoint:null,spacebarPressed:false,canvasElement:null,canvasArea:null,baseWidth:0,baseHeight:0,centerX:0,centerY:0,init:function(){console.log('Chatooly:Initializing canvas zoom');if(Chatooly.canvasArea && Chatooly.canvasArea.canvasElement){this.setCanvasArea(Chatooly.canvasArea.areaContainer,Chatooly.canvasArea.canvasElement)}else if(this.findCanvas()){this.setupCanvasForZoom();this.setupZoomControls();console.log('Chatooly:Canvas zoom ready(legacy mode)')}},setCanvasArea:function(areaContainer,canvasElement){this.canvasArea = areaContainer;this.canvasElement = canvasElement;this.setupCanvasForZoom();this.setupZoomControls();console.log('Chatooly:Canvas zoom ready with canvas area')},findCanvas:function(){const canvasArea = document.getElementById('chatooly-canvas-area');if(canvasArea){this.canvasArea = canvasArea;this.canvasElement = canvasArea.querySelector('canvas');if(this.canvasElement){console.log('Chatooly:Found canvas in canvas area');return true}}const target = Chatooly.utils.detectExportTarget();if(target && target.element && target.element.tagName === 'CANVAS'){this.canvasElement = target.element;console.log(`Chatooly:Using canvas for zoom:`,this.canvasElement.id || 'unnamed');return true}console.warn('Chatooly:No canvas found for zoom');return false},setupCanvasForZoom:function(){if(!this.canvasElement)return;const rect = this.canvasElement.getBoundingClientRect();this.baseWidth = rect.width;this.baseHeight = rect.height;this.centerX = this.baseWidth / 2;this.centerY = this.baseHeight / 2;this.originalPosition = this.canvasElement.style.position || 'relative';this.originalTransform = this.canvasElement.style.transform || '';this.canvasElement.style.transformOrigin = 'center center';if(!this.canvasArea){document.body.style.overflow = 'auto'}console.log(`Chatooly:Canvas zoom setup - ${this.baseWidth}x${this.baseHeight}`)},setupZoomControls:function(){document.addEventListener('wheel',(e)=>{if(e.ctrlKey || e.metaKey){e.preventDefault();const delta = e.deltaY > 0 ? -this.zoomStep:this.zoomStep;this.zoom(delta,e.clientX,e.clientY)}},{passive:false});document.addEventListener('keydown',(e)=>{if(e.code === 'Space'){this.spacebarPressed = true;this.updateCursor();if(e.target === this.canvasElement || this.canvasElement?.contains(e.target)){e.preventDefault()}}if(e.ctrlKey || e.metaKey){if(e.key === '=' || e.key === '+'){e.preventDefault();this.zoomToCenter(this.zoomStep)}else if(e.key === '-'){e.preventDefault();this.zoomToCenter(-this.zoomStep)}else if(e.key === '0'){e.preventDefault();this.resetZoom()}}else if(e.key === 'r' || e.key === 'R'){e.preventDefault();if(Chatooly.canvasArea && Chatooly.canvasArea.resetZoomAndCenter){Chatooly.canvasArea.resetZoomAndCenter()}else{this.resetZoom()}}});document.addEventListener('keyup',(e)=>{if(e.code === 'Space'){this.spacebarPressed = false;this.updateCursor();this.endPan()}});document.addEventListener('mousedown',(e)=>{if(e.target === this.canvasElement && this.spacebarPressed){this.startPan(e.clientX,e.clientY);e.preventDefault()}});document.addEventListener('mousemove',(e)=>{if(this.isPanning){this.updatePan(e.clientX,e.clientY);e.preventDefault()}});document.addEventListener('mouseup',()=>{this.endPan()});this.setupTouchControls();console.log('Chatooly:Zoom controls active')},setupTouchControls:function(){let initialDistance = 0;let initialZoom = 1;document.addEventListener('touchstart',(e)=>{if(e.touches.length === 2){e.preventDefault();initialDistance = this.getTouchDistance(e.touches[0],e.touches[1]);initialZoom = this.currentZoom}},{passive:false});document.addEventListener('touchmove',(e)=>{if(e.touches.length === 2){e.preventDefault();const currentDistance = this.getTouchDistance(e.touches[0],e.touches[1]);const scale = currentDistance / initialDistance;const newZoom = Math.max(this.minZoom,Math.min(this.maxZoom,initialZoom * scale));const centerX =(e.touches[0].clientX + e.touches[1].clientX)/ 2;const centerY =(e.touches[0].clientY + e.touches[1].clientY)/ 2;this.setZoom(newZoom,centerX,centerY)}},{passive:false})},getTouchDistance:function(touch1,touch2){const dx = touch1.clientX - touch2.clientX;const dy = touch1.clientY - touch2.clientY;return Math.sqrt(dx * dx + dy * dy)},zoom:function(delta,clientX,clientY){const newZoom = Math.max(this.minZoom,Math.min(this.maxZoom,this.currentZoom + delta));this.setZoom(newZoom,clientX,clientY)},zoomToCenter:function(delta){const rect = this.canvasElement.getBoundingClientRect();const centerX = rect.left + rect.width / 2;const centerY = rect.top + rect.height / 2;this.zoom(delta,centerX,centerY)},setZoom:function(zoom,clientX,clientY){if(!this.canvasElement)return;const oldZoom = this.currentZoom;this.currentZoom = Math.max(this.minZoom,Math.min(this.maxZoom,zoom));if(this.currentZoom === oldZoom)return;if(clientX !== undefined && clientY !== undefined){const rect = this.canvasElement.getBoundingClientRect();const canvasX = clientX - rect.left;const canvasY = clientY - rect.top;const zoomRatio = this.currentZoom / oldZoom;const deltaX = canvasX *(zoomRatio - 1);const deltaY = canvasY *(zoomRatio - 1);this.panX -= deltaX;this.panY -= deltaY}this.applyTransform();this.updateBodySize();this.showZoomIndicator();console.log(`Chatooly:Zoom:${(this.currentZoom * 100).toFixed(0)}%`)},resetZoom:function(){this.currentZoom = 1.0;this.panX = 0;this.panY = 0;this.applyTransform();this.updateBodySize();this.showZoomIndicator();if(this.canvasArea && Chatooly.canvasArea){setTimeout(()=>{Chatooly.canvasArea.centerCanvas()},50)}console.log('Chatooly:Zoom reset to 100% and centered')},applyTransform:function(){if(!this.canvasElement)return;const transform = `translate(${this.panX}px,${this.panY}px)scale(${this.currentZoom})`;this.canvasElement.style.transform = transform;this.updateCursor();if(this.canvasArea && Chatooly.canvasArea){Chatooly.canvasArea.enableZoomMode(this.currentZoom > 1.0)}},updateBodySize:function(){if(this.canvasArea){return}const zoomedWidth = this.baseWidth * this.currentZoom;const zoomedHeight = this.baseHeight * this.currentZoom;const totalWidth = Math.max(window.innerWidth,zoomedWidth + Math.abs(this.panX)+ 100);const totalHeight = Math.max(window.innerHeight,zoomedHeight + Math.abs(this.panY)+ 100);document.body.style.minWidth = totalWidth + 'px';document.body.style.minHeight = totalHeight + 'px'},startPan:function(x,y){this.isPanning = true;this.lastPanPoint ={x,y};this.canvasElement.style.cursor = 'grabbing';document.body.style.userSelect = 'none'},updatePan:function(x,y){if(!this.isPanning || !this.lastPanPoint)return;const deltaX = x - this.lastPanPoint.x;const deltaY = y - this.lastPanPoint.y;this.panX += deltaX;this.panY += deltaY;this.applyTransform();this.updateBodySize();this.lastPanPoint ={x,y}},endPan:function(){if(this.isPanning){this.isPanning = false;this.lastPanPoint = null;this.updateCursor();document.body.style.userSelect = ''}},updateCursor:function(){if(!this.canvasElement)return;if(this.isPanning){this.canvasElement.style.cursor = 'grabbing'}else if(this.spacebarPressed){this.canvasElement.style.cursor = 'grab'}else{this.canvasElement.style.cursor = 'default'}},showZoomIndicator:function(){let indicator = document.getElementById('chatooly-zoom-indicator');const parent = this.canvasArea || document.body;if(!indicator){indicator = document.createElement('div');indicator.id = 'chatooly-zoom-indicator';indicator.className = 'zoom-indicator';if(this.canvasArea){indicator.style.cssText = ` position:absolute;top:10px;right:10px;background:rgba(0,0,0,0.8);color:white;padding:8px 12px;border-radius:4px;font-family:monospace;font-size:14px;pointer-events:none;z-index:10;transition:opacity 0.3s ease;`}else{indicator.style.cssText = ` position:fixed;top:20px;right:20px;background:rgba(0,0,0,0.8);color:white;padding:8px 12px;border-radius:4px;font-family:monospace;font-size:14px;pointer-events:none;z-index:1000;transition:opacity 0.3s ease;`}parent.appendChild(indicator)}const zoomPercent = Math.round(this.currentZoom * 100);indicator.textContent = `${zoomPercent}%`;indicator.style.opacity = '1';clearTimeout(this.indicatorTimeout);if(zoomPercent === 100){this.indicatorTimeout = setTimeout(()=>{indicator.style.opacity = '0'},2000)}},onCanvasResize:function(width,height){if(this.resizeTimeout){clearTimeout(this.resizeTimeout)}this.resizeTimeout = setTimeout(()=>{console.log(`Chatooly:Canvas resized to ${width}x${height}- updating zoom`);this.baseWidth = width;this.baseHeight = height;this.centerX = width / 2;this.centerY = height / 2;this.currentZoom = 1.0;this.panX = 0;this.panY = 0;this.applyTransform();this.updateBodySize()},150)},reinitialize:function(){console.log('Chatooly:Reinitializing zoom for new canvas');this.currentZoom = 1.0;this.panX = 0;this.panY = 0;this.findCanvas();this.setupCanvasForZoom()}};Chatooly.publish ={publish:async function(options){if(!Chatooly.utils.isDevelopment()){console.warn('Chatooly:Publishing only available in development mode');return}options = options ||{};const toolName = options.name || Chatooly.config.name || prompt('Enter tool name for publishing:');if(!toolName){console.log('Chatooly:Publishing cancelled');return}const config = this._loadToolConfig(options);const toolSlug = this._createToolSlug(toolName);console.log('Chatooly:Publishing tool "' + toolName + '" as "' + toolSlug + '"');const validation = this.validateTool();if(!validation.valid){console.error('Chatooly:Tool validation failed:',validation.errors);alert('Publishing failed. Please fix these errors:\n' + validation.errors.join('\n'));return}if(validation.warnings.length > 0){console.warn('Chatooly:Publishing warnings:',validation.warnings)}this._showPublishingProgress();try{const toolFiles = await this._gatherToolFiles();const metadata ={name:toolName,slug:toolSlug,category:config.category || 'generators',tags:config.tags || [],description:config.description || '',private:config.private || false,version:config.version || '1.0.0',author:config.author || 'Anonymous',timestamp:new Date().toISOString()};const result = await this._uploadToStaging(toolSlug,toolFiles,metadata);this._hidePublishingProgress();this._showPublishSuccess(result)}catch(error){this._hidePublishingProgress();this._showPublishError(error)}},_createToolSlug:function(toolName){return toolName.toLowerCase().replace(/[^a-z0-9\s-]/g,'').replace(/\s+/g,'-').replace(/-+/g,'-').replace(/^-|-$/g,'')},_gatherToolFiles:async function(){const files ={};const discovered = new Set();const htmlClone = document.documentElement.cloneNode(true);const exportBtn = htmlClone.querySelector('#chatooly-export-btn');if(exportBtn)exportBtn.remove();const publishProgress = htmlClone.querySelector('#chatooly-publish-progress');if(publishProgress)publishProgress.remove();const publishSuccess = htmlClone.querySelector('div[style*="Published Successfully"]');if(publishSuccess)publishSuccess.remove();const publishError = htmlClone.querySelector('div[style*="Publishing Failed"]');if(publishError)publishError.remove();const chatoolyCdnScript = htmlClone.querySelector('script[src*="chatooly-cdn"]');if(chatoolyCdnScript){chatoolyCdnScript.setAttribute('src','https://yaelren.github.io/chatooly-cdn/js/core.min.js')}else{const script = htmlClone.createElement('script');script.src = 'https://yaelren.github.io/chatooly-cdn/js/core.min.js';script.async = true;htmlClone.head.appendChild(script)}const htmlContent = '<!DOCTYPE html>' + htmlClone.outerHTML;files['index.html'] = htmlContent;discovered.add('index.html');await this._collectExternalFiles(htmlContent,files,discovered);await this._scanFileDependencies(htmlContent,files,discovered);const styles = Array.from(document.querySelectorAll('style:not(#chatooly-button-styles)')).map(s => s.textContent).join('\n');if(styles){files['style.css'] = styles;discovered.add('style.css');await this._scanFileDependencies(styles,files,discovered,'css')}const scripts = Array.from(document.querySelectorAll('script:not([src]):not([id])')).map(s => s.textContent).join('\n');if(scripts){files['tool.js'] = scripts;discovered.add('tool.js');await this._scanFileDependencies(scripts,files,discovered,'js')}console.log('Chatooly:Collected files:',Object.keys(files));return files},_collectExternalFiles:async function(htmlContent,files,discovered){const externalFiles = [ ...Array.from(document.querySelectorAll('script[src]:not([src*="http"]):not([src*="chatooly-cdn"])')).map(s => s.getAttribute('src')),...Array.from(document.querySelectorAll('link[rel="stylesheet"][href]:not([href*="http"])')).map(l => l.getAttribute('href'))];console.log('Chatooly:Found external files to collect:',externalFiles);for(const filePath of externalFiles){if(filePath && !discovered.has(filePath)){discovered.add(filePath);try{const fileContent = await this._fetchLocalFile(filePath);if(fileContent){files[filePath] = fileContent;console.log(`Chatooly:Collected ${filePath}(${fileContent.length}chars)`);const extension = filePath.split('.').pop().toLowerCase();if(['html','css','js'].includes(extension)){await this._scanFileDependencies(fileContent,files,discovered,extension)}}}catch(error){console.warn(`Chatooly:Could not collect ${filePath}:`,error)}}}},_scanFileDependencies:async function(content,files,discovered,fileType = 'html'){const dependencyPatterns ={html:[ /<script src="\.\/([^"]+)"/g,/<link href="\.\/([^"]+)"/g,/<img src="\.\/([^"]+)"/g,/<source src="\.\/([^"]+)"/g,/<video src="\.\/([^"]+)"/g,/<audio src="\.\/([^"]+)"/g ],css:[ /url\(['"]?\.\/([^'")\s]+)['"]?\)/g,/@import ['"]\.\/([^'"]+)['"]/g ],js:[ /fetch\(['"`]\.\/([^'"`]+)['"`]\)/g,/import.*from ['"`]\.\/([^'"`]+)['"`]/g,/require\(['"`]\.\/([^'"`]+)['"`]\)/g,/loadJSON\(['"`]\.\/([^'"`]+)['"`]\)/g,/loadImage\(['"`]\.\/([^'"`]+)['"`]\)/g,/loadSound\(['"`]\.\/([^'"`]+)['"`]\)/g ]};const patterns = dependencyPatterns[fileType] || [];for(const pattern of patterns){let match;while((match = pattern.exec(content))!== null){const filePath = match[1];if(!discovered.has(filePath)){discovered.add(filePath);try{const fileContent = await this._fetchLocalFile(filePath);if(fileContent){files[filePath] = fileContent;const extension = filePath.split('.').pop().toLowerCase();if(['html','css','js'].includes(extension)){await this._scanFileDependencies(fileContent,files,discovered,extension)}}}catch(error){console.warn(`Chatooly:Could not load dependency:${filePath}`,error)}}}}},_fetchLocalFile:async function(filePath){try{const response = await fetch(filePath);if(!response.ok)throw new Error(`HTTP ${response.status}`);const contentType = response.headers.get('content-type')|| '';if(contentType.startsWith('image/')|| contentType.startsWith('audio/')|| contentType.startsWith('video/')){const arrayBuffer = await response.arrayBuffer();const bytes = new Uint8Array(arrayBuffer);let binary = '';bytes.forEach(byte => binary += String.fromCharCode(byte));return `data:${contentType};base64,${btoa(binary)}`}else{return await response.text()}}catch(error){console.warn(`Chatooly:Failed to fetch ${filePath}:`,error);return null}},_gatherResourceReferences:function(){const resources ={scripts:[],styles:[],images:[],fonts:[]};Array.from(document.querySelectorAll('script[src]')).forEach(script =>{resources.scripts.push(script.src)});Array.from(document.querySelectorAll('link[rel="stylesheet"]')).forEach(link =>{resources.styles.push(link.href)});Array.from(document.querySelectorAll('img[src]')).forEach(img =>{resources.images.push(img.src)});return resources},_loadToolConfig:function(options){const config = window.ChatoolyConfig ||{};return Object.assign({category:'tools',tags:[],description:'',private:false,version:'1.0.0',author:'Anonymous'},config,options)},_uploadToStaging:async function(toolSlug,files,metadata){try{console.log('Chatooly:Uploading to Chatooly Hub...');const payload ={toolName:toolSlug,metadata:metadata,files:files};const response = await fetch('https://studiovideotoolhub.vercel.app/api/publish',{method:'POST',headers:{'Content-Type':'application/json','X-Chatooly-Source':'cdn'},body:JSON.stringify(payload)});if(!response.ok){throw new Error(`HTTP ${response.status}:${response.statusText}`)}const result = await response.json();if(!result.success){throw new Error(result.message || 'Publishing failed')}return result}catch(error){console.warn('Chatooly:Hub API unavailable,using local simulation:',error);const result ={success:true,url:`https://tools.chatooly.com/${toolSlug}`,actualName:toolSlug,requestedName:metadata.name,publishedAt:new Date().toISOString(),metadata:metadata,message:'Tool published successfully!(Simulated - Hub not available)'};localStorage.setItem(`chatooly-published-${toolSlug}`,JSON.stringify(result));return result}},_showPublishingProgress:function(){const progressDiv = document.createElement('div');progressDiv.id = 'chatooly-publish-progress';progressDiv.innerHTML = ` <div style=" position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:white;padding:30px;border-radius:12px;box-shadow:0 10px 40px rgba(0,0,0,0.2);z-index:100000;text-align:center;font-family:-apple-system,system-ui,sans-serif;"> <div style=" width:50px;height:50px;border:3px solid #f3f3f3;border-top:3px solid #007bff;border-radius:50%;margin:0 auto 20px;animation:chatooly-spin 1s linear infinite;"></div> <h3 style="margin:0 0 10px;">Publishing to Chatooly...</h3> <p style="margin:0;color:#666;">Uploading tool files to staging server</p> </div> <style> @keyframes chatooly-spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}</style> `;document.body.appendChild(progressDiv)},_hidePublishingProgress:function(){const progressDiv = document.getElementById('chatooly-publish-progress');if(progressDiv){progressDiv.remove()}},_showPublishSuccess:function(result){const successDiv = document.createElement('div');const nameMessage = result.actualName !== result.requestedName ? `<p style="margin:10px 0;color:#666;">Tool published as "${result.actualName}"(name was adjusted)</p>`:'';successDiv.innerHTML = ` <div style=" position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:white;padding:30px;border-radius:12px;box-shadow:0 10px 40px rgba(0,0,0,0.2);z-index:100000;text-align:center;font-family:-apple-system,system-ui,sans-serif;max-width:500px;"> <div style=" width:60px;height:60px;background:#28a745;border-radius:50%;margin:0 auto 20px;display:flex;align-items:center;justify-content:center;color:white;font-size:30px;">✓</div> <h3 style="margin:0 0 10px;color:#28a745;">Published Successfully!</h3> <p style="margin:10px 0;color:#666;"> ${result.message || 'Your tool has been published to Chatooly.'}</p> ${nameMessage}<div style=" background:#f8f9fa;padding:15px;border-radius:8px;margin:20px 0;text-align:left;"> <p style="margin:5px 0;"><strong>Live URL:</strong><br> <a href="${result.url}" target="_blank" style="color:#007bff;"> ${result.url}</a> </p> <p style="margin:5px 0;font-size:12px;color:#888;"> Published:${new Date(result.publishedAt).toLocaleString()}</p> </div> <button onclick="this.closest('div').parentElement.remove()" style=" background:#007bff;color:white;border:none;padding:10px 30px;border-radius:6px;font-size:16px;cursor:pointer;">Close</button> </div> `;document.body.appendChild(successDiv)},_showPublishError:function(error){const errorDiv = document.createElement('div');errorDiv.innerHTML = ` <div style=" position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:white;padding:30px;border-radius:12px;box-shadow:0 10px 40px rgba(0,0,0,0.2);z-index:100000;text-align:center;font-family:-apple-system,system-ui,sans-serif;max-width:500px;"> <div style=" width:60px;height:60px;background:#dc3545;border-radius:50%;margin:0 auto 20px;display:flex;align-items:center;justify-content:center;color:white;font-size:30px;">✕</div> <h3 style="margin:0 0 10px;color:#dc3545;">Publishing Failed</h3> <p style="margin:10px 0;color:#666;"> ${error.message || 'An error occurred while publishing your tool.'}</p> <button onclick="this.closest('div').parentElement.remove()" style=" background:#dc3545;color:white;border:none;padding:10px 30px;border-radius:6px;font-size:16px;cursor:pointer;">Close</button> </div> `;document.body.appendChild(errorDiv)},validateTool:function(){const validation ={valid:true,warnings:[],errors:[]};const chatoolyContainer = document.getElementById('chatooly-container');if(!chatoolyContainer){validation.errors.push('Missing required template structure:<div id="chatooly-container"> not found');validation.valid = false}else{const chatoolyCanvas = chatoolyContainer.querySelector('canvas#chatooly-canvas');if(!chatoolyCanvas){validation.errors.push('Missing required canvas:<canvas id="chatooly-canvas"> not found inside chatooly-container');validation.valid = false}}if(!Chatooly.config.name || Chatooly.config.name === 'Untitled Tool'){validation.warnings.push('Tool name not set - using default')}const target = Chatooly.utils.detectExportTarget();if(!target.element){validation.errors.push('No exportable content found');validation.valid = false}const scripts = document.querySelectorAll('script[src]');if(scripts.length === 0){validation.warnings.push('No external libraries detected')}return validation},publishFromCLI:function(configPath){try{const config = window.ChatoolyPublishConfig ||{name:Chatooly.config.name,category:'tools',tags:[],description:'',version:'1.0.0'};if(!config.name){throw new Error('Tool name is required in config')}this.publish(config)}catch(error){console.error('Chatooly CLI:Publishing failed:',error);if(typeof process !== 'undefined' && process.exit){process.exit(1)}}},_getAuthToken:function(){return 'poc-auth-token'}};Chatooly.ui ={createExportButton:function(){const existingButton = document.getElementById('chatooly-export-btn');if(existingButton){existingButton.remove()}const button = document.createElement('div');button.id = 'chatooly-export-btn';button.innerHTML = this._getButtonHTML();button.style.cssText = this._getButtonStyles();this._injectButtonCSS();this._attachButtonEvents(button);document.body.appendChild(button)},_getButtonHTML:function(){const isDev = Chatooly.utils.isDevelopment();const dimensions = Chatooly.canvasResizer ? Chatooly.canvasResizer.getCurrentDimensions():{width:1920,height:1080};const currentWidth = dimensions.width;const currentHeight = dimensions.height;return ` <!-- Minimized Floating Button --> <div class="chatooly-minimized-btn"> <div class="chatooly-minimized-icon">🐱</div> <div class="chatooly-minimized-label">CHATOOLY</div> </div> <!-- Expanded Panel --> <div class="chatooly-export-panel" style="display:none;"> <!-- Sidebar Navigation --> <div class="chatooly-sidebar"> <div class="chatooly-nav-item active" data-tab="canvas-size"> <span class="chatooly-nav-icon">📏</span> <span class="chatooly-nav-label">Canvas Size</span> </div> <div class="chatooly-nav-item" data-tab="export"> <span class="chatooly-nav-icon">📤</span> <span class="chatooly-nav-label">Export</span> </div> <div class="chatooly-nav-item" data-tab="publish"> <span class="chatooly-nav-icon">🚀</span> <span class="chatooly-nav-label">Publish</span> </div> <div class="chatooly-nav-item" data-tab="info"> <span class="chatooly-nav-icon">ℹ️</span> <span class="chatooly-nav-label">Info</span> </div> </div> <!-- Settings Panel --> <div class="chatooly-settings-panel"> <div class="chatooly-settings-content"> <!-- Canvas Size Tab Content --> <div class="chatooly-tab-content" id="canvas-size-content"> <div class="chatooly-settings-section"> <h4 class="chatooly-section-title">Size</h4> <div class="chatooly-size-inputs"> <div class="chatooly-input-group"> <label>W</label> <input type="number" id="chatooly-canvas-width" value="${currentWidth}" min="100" max="4000" class="chatooly-size-input"> <span class="chatooly-unit">px</span> </div> <div class="chatooly-input-group"> <label>H</label> <input type="number" id="chatooly-canvas-height" value="${currentHeight}" min="100" max="4000" class="chatooly-size-input"> <span class="chatooly-unit">px</span> </div> </div> </div> <div class="chatooly-settings-section"> <h4 class="chatooly-section-title">Standard Ratios</h4> <div class="chatooly-ratio-buttons"> <button class="chatooly-ratio-btn" data-width="1920" data-height="1080">HD(16:9)</button> <button class="chatooly-ratio-btn" data-width="1200" data-height="1200">Square(1:1)</button> <button class="chatooly-ratio-btn" data-width="800" data-height="600">4:3</button> <button class="chatooly-ratio-btn" data-width="1080" data-height="1920">Portrait(9:16)</button> </div> </div> <div class="chatooly-settings-section"> <button class="chatooly-btn-primary chatooly-apply-btn">Apply</button> </div> </div> <!-- Export Tab Content --> <div class="chatooly-tab-content" id="export-content" style="display:none;"> <div class="chatooly-settings-section"> <h4 class="chatooly-section-title">Export Type</h4> <div class="chatooly-export-type-buttons"> <button class="chatooly-export-type-btn active" data-type="image">Image</button> <button class="chatooly-export-type-btn" data-type="video">Video</button> </div> </div> <!-- Image Export Options --> <div class="chatooly-export-options" id="image-export-options"> <div class="chatooly-settings-section"> <h4 class="chatooly-section-title">Scale</h4> <div class="chatooly-scale-buttons"> <button class="chatooly-scale-btn" data-scale="0.5">0.5x</button> <button class="chatooly-scale-btn active" data-scale="1">1x</button> <button class="chatooly-scale-btn" data-scale="2">2x</button> <button class="chatooly-scale-btn" data-scale="3">3x</button> <button class="chatooly-scale-btn" data-scale="4">4x</button> </div> </div> <div class="chatooly-settings-section"> <button class="chatooly-btn-primary chatooly-export-btn">Export Image</button> </div> </div> <!-- Video Export Options --> <div class="chatooly-export-options" id="video-export-options" style="display:none;"> <div class="chatooly-settings-section"> <h4 class="chatooly-section-title">Duration</h4> <div class="chatooly-form-group"> <input type="number" id="chatooly-video-duration" value="5" min="1" max="30" step="0.5" class="chatooly-text-input"> <small>How long to record the animation(seconds)</small> </div> </div> <div class="chatooly-settings-section"> <h4 class="chatooly-section-title">Frame Rate</h4> <div class="chatooly-form-group"> <select id="chatooly-video-fps" class="chatooly-text-input"> <option value="24">24 FPS(cinematic)</option> <option value="30" selected>30 FPS(standard)</option> <option value="60">60 FPS(smooth)</option> </select> <small>Higher FPS = smoother but larger files</small> </div> </div> <div class="chatooly-settings-section"> <h4 class="chatooly-section-title">Video Format</h4> <div class="chatooly-form-group"> <select id="chatooly-video-format" class="chatooly-text-input"> <option value="mp4" selected>MP4(H.264)- Best compatibility</option> <option value="webm-vp9">WebM(VP9)- Smaller files</option> <option value="webm-vp8">WebM(VP8)- Faster encoding</option> <option value="webm-h264">WebM(H.264)- Chrome only</option> <option value="mkv">MKV(Matroska)- Chrome only</option> <option value="auto">Auto-detect best format</option> </select> <small>MP4 works everywhere,WebM is smaller,Auto finds best option</small> </div> </div> <div class="chatooly-settings-section"> <div class="chatooly-info-box"> <div class="chatooly-text-small chatooly-text-muted"> <strong>Detected:</strong> ${this.toolInfo?.framework || 'Canvas'}animation<br> <strong>Export:</strong> MP4/WebM/MKV video(MediaRecorder API)</div> </div> </div> <div class="chatooly-settings-section"> <button class="chatooly-btn-primary chatooly-video-export-btn">Export</button> </div> </div> </div> <!-- Publish Tab Content --> <div class="chatooly-tab-content" id="publish-content" style="display:none;"> <div class="chatooly-settings-section"> <h4 class="chatooly-section-title">Publish to ToolHub</h4> <p class="chatooly-description"> Publish this tool to our ToolHub so others can discover and use it. Your tool will be available in our community gallery. </p> </div> <div class="chatooly-settings-section"> <div class="chatooly-form-group"> <label>Tool Name</label> <input type="text" id="chatooly-tool-name" placeholder="Enter tool name" class="chatooly-text-input"> </div> <div class="chatooly-form-group"> <label>Description</label> <textarea id="chatooly-tool-description" placeholder="Describe your tool..." class="chatooly-textarea"></textarea> </div> </div> <div class="chatooly-settings-section"> <button class="chatooly-btn-primary chatooly-publish-btn">Publish</button> </div> </div> <!-- Info Tab Content --> <div class="chatooly-tab-content" id="info-content" style="display:none;"> <div class="chatooly-settings-section"> <h4 class="chatooly-section-title">Canvas Controls</h4> <div class="chatooly-info-list"> <div class="chatooly-info-item"> <strong>Zoom:</strong> Ctrl + Scroll to zoom in/out </div> <div class="chatooly-info-item"> <strong>Pan:</strong> Spacebar + Drag to pan when zoomed </div> <div class="chatooly-info-item"> <strong>Reset:</strong> Press R to reset zoom & center </div> </div> </div> <div class="chatooly-settings-section"> <h4 class="chatooly-section-title">About Chatooly</h4> <p class="chatooly-description"> Chatooly is a canvas-based design tool that helps you create,export,and share your creative projects. </p> </div> <div class="chatooly-settings-section"> <button class="chatooly-btn-secondary chatooly-reset-canvas-btn">Reset Canvas</button> </div> </div> </div> </div> </div> `},_getButtonStyles:function(){const position = Chatooly.config.buttonPosition || 'bottom-right';const positions ={'bottom-right':'position:fixed;bottom:20px;right:20px;','bottom-left':'position:fixed;bottom:20px;left:20px;','top-right':'position:fixed;top:20px;right:20px;','top-left':'position:fixed;top:20px;left:20px;'};return positions[position] + ` z-index:10000;display:block;`},_injectButtonCSS:function(){if(document.getElementById('chatooly-button-styles')){return}const style = document.createElement('style');style.id = 'chatooly-button-styles';style.textContent = ` #chatooly-export-btn .chatooly-minimized-btn{display:flex;align-items:center;justify-content:center;gap:var(--chatooly-spacing-2,8px);background:var(--chatooly-color-surface,#ffffff);border:var(--chatooly-border-width-thin,1px)solid var(--chatooly-color-border,#e5e7eb);border-radius:var(--chatooly-border-radius-lg,12px);box-shadow:var(--chatooly-shadow-lg,0 10px 25px rgba(0,0,0,0.15));padding:var(--chatooly-spacing-3,12px)var(--chatooly-spacing-4,16px);cursor:pointer;transition:all var(--chatooly-transition-normal,0.2s ease);min-width:120px;font-family:var(--chatooly-font-family,-apple-system,BlinkMacSystemFont,'Segoe UI',sans-serif)}#chatooly-export-btn .chatooly-minimized-btn:hover{background:var(--chatooly-color-surface-hover,#f9fafb);transform:translateY(-2px);box-shadow:var(--chatooly-shadow-xl,0 20px 40px rgba(0,0,0,0.2))}#chatooly-export-btn .chatooly-minimized-icon{font-size:var(--chatooly-font-size-md,14px)}#chatooly-export-btn .chatooly-minimized-label{font-size:var(--chatooly-font-size-sm,12px);color:var(--chatooly-color-text-muted,#6b7280);font-weight:var(--chatooly-font-weight-semibold,600);text-transform:uppercase;letter-spacing:0.5px}#chatooly-export-btn .chatooly-export-panel{display:flex;flex-direction:row;background:var(--chatooly-color-surface);border:var(--chatooly-border-width-thin)solid var(--chatooly-color-border);border-radius:var(--chatooly-border-radius-lg);box-shadow:var(--chatooly-shadow-lg);overflow:hidden;min-width:500px;max-width:600px;font-family:var(--chatooly-font-family);position:absolute;bottom:100%;right:0;margin-bottom:var(--chatooly-spacing-2);transform:translateY(20px);opacity:0;transition:all var(--chatooly-transition-normal)}#chatooly-export-btn .chatooly-export-panel.show{transform:translateY(0);opacity:1}#chatooly-export-btn .chatooly-sidebar{display:flex;flex-direction:column;background:var(--chatooly-color-surface);padding:var(--chatooly-spacing-4)0;border-right:var(--chatooly-border-width-thin)solid var(--chatooly-color-border);width:120px;flex-shrink:0}#chatooly-export-btn .chatooly-nav-item{display:flex;align-items:center;padding:var(--chatooly-spacing-3)var(--chatooly-spacing-5);color:var(--chatooly-color-text-muted);cursor:pointer;transition:all var(--chatooly-transition-normal);border-left:3px solid transparent}#chatooly-export-btn .chatooly-nav-item:hover{color:var(--chatooly-color-text);background:var(--chatooly-color-surface-hover)}#chatooly-export-btn .chatooly-nav-item.active{color:var(--chatooly-color-text);background:var(--chatooly-color-surface-active);border-left-color:var(--chatooly-color-primary)}#chatooly-export-btn .chatooly-nav-icon{margin-right:var(--chatooly-spacing-3);font-size:var(--chatooly-font-size-md)}#chatooly-export-btn .chatooly-nav-label{font-size:var(--chatooly-font-size-sm);font-weight:var(--chatooly-font-weight-medium)}#chatooly-export-btn .chatooly-settings-panel{flex:1;display:flex;flex-direction:column;background:var(--chatooly-color-surface)}#chatooly-export-btn .chatooly-settings-content{flex:1;padding:var(--chatooly-spacing-6)}#chatooly-export-btn .chatooly-settings-section{margin-bottom:var(--chatooly-spacing-6)}#chatooly-export-btn .chatooly-settings-section:last-child{margin-bottom:0}#chatooly-export-btn .chatooly-section-title{font-size:var(--chatooly-font-size-sm);font-weight:var(--chatooly-font-weight-semibold);color:var(--chatooly-color-text);margin:0 0 var(--chatooly-spacing-4)0;text-transform:uppercase;letter-spacing:0.5px}#chatooly-export-btn .chatooly-size-inputs{display:flex;gap:var(--chatooly-spacing-4);align-items:center}#chatooly-export-btn .chatooly-input-group{display:flex;align-items:center;gap:var(--chatooly-spacing-2)}#chatooly-export-btn .chatooly-input-group label{font-size:var(--chatooly-font-size-sm);color:var(--chatooly-color-text);font-weight:var(--chatooly-font-weight-medium);min-width:20px}#chatooly-export-btn .chatooly-size-input{width:80px;padding:var(--chatooly-spacing-2)var(--chatooly-spacing-3);background:var(--chatooly-color-surface-hover);border:var(--chatooly-border-width-thin)solid var(--chatooly-color-border);border-radius:var(--chatooly-border-radius);color:var(--chatooly-color-text);font-size:var(--chatooly-font-size-sm);text-align:center;transition:all var(--chatooly-transition-normal)}#chatooly-export-btn .chatooly-size-input:focus{outline:none;border-color:var(--chatooly-color-primary);box-shadow:var(--chatooly-shadow-focus)}#chatooly-export-btn .chatooly-unit{font-size:var(--chatooly-font-size-xs);color:var(--chatooly-color-text-muted)}#chatooly-export-btn .chatooly-scale-buttons{display:flex;gap:var(--chatooly-spacing-2)}#chatooly-export-btn .chatooly-scale-btn{padding:var(--chatooly-spacing-2)var(--chatooly-spacing-4);background:transparent;border:var(--chatooly-border-width-thin)solid var(--chatooly-color-border);border-radius:var(--chatooly-border-radius);color:var(--chatooly-color-text-muted);font-size:var(--chatooly-font-size-sm);font-weight:var(--chatooly-font-weight-medium);cursor:pointer;transition:all var(--chatooly-transition-normal)}#chatooly-export-btn .chatooly-scale-btn:hover{color:var(--chatooly-color-text);background:var(--chatooly-color-surface-hover)}#chatooly-export-btn .chatooly-scale-btn.active{background:var(--chatooly-color-surface-active);color:var(--chatooly-color-text);border-color:var(--chatooly-color-primary)}#chatooly-export-btn .chatooly-format-buttons{display:flex;gap:var(--chatooly-spacing-2)}#chatooly-export-btn .chatooly-format-btn{padding:var(--chatooly-spacing-2)var(--chatooly-spacing-4);background:transparent;border:var(--chatooly-border-width-thin)solid var(--chatooly-color-border);border-radius:var(--chatooly-border-radius);color:var(--chatooly-color-text-muted);font-size:var(--chatooly-font-size-sm);font-weight:var(--chatooly-font-weight-medium);cursor:pointer;transition:all var(--chatooly-transition-normal)}#chatooly-export-btn .chatooly-format-btn:hover{color:var(--chatooly-color-text);background:var(--chatooly-color-surface-hover)}#chatooly-export-btn .chatooly-format-btn.active{background:var(--chatooly-color-surface-active);color:var(--chatooly-color-text);border-color:var(--chatooly-color-primary)}#chatooly-export-btn .chatooly-tab-content{display:block}#chatooly-export-btn .chatooly-tab-content.hidden{display:none}#chatooly-export-btn .chatooly-ratio-buttons{display:grid;grid-template-columns:1fr 1fr;gap:var(--chatooly-spacing-2)}#chatooly-export-btn .chatooly-ratio-btn{padding:var(--chatooly-spacing-2)var(--chatooly-spacing-3);background:transparent;border:var(--chatooly-border-width-thin)solid var(--chatooly-color-border);border-radius:var(--chatooly-border-radius);color:var(--chatooly-color-text-muted);font-size:var(--chatooly-font-size-xs);font-weight:var(--chatooly-font-weight-medium);cursor:pointer;transition:all var(--chatooly-transition-normal)}#chatooly-export-btn .chatooly-ratio-btn:hover{color:var(--chatooly-color-text);background:var(--chatooly-color-surface-hover)}#chatooly-export-btn .chatooly-ratio-btn.active{background:var(--chatooly-color-surface-active);color:var(--chatooly-color-text);border-color:var(--chatooly-color-primary)}#chatooly-export-btn .chatooly-export-type-buttons{display:flex;gap:var(--chatooly-spacing-2)}#chatooly-export-btn .chatooly-export-type-btn{flex:1;padding:var(--chatooly-spacing-2)var(--chatooly-spacing-4);background:transparent;border:var(--chatooly-border-width-thin)solid var(--chatooly-color-border);border-radius:var(--chatooly-border-radius);color:var(--chatooly-color-text-muted);font-size:var(--chatooly-font-size-sm);font-weight:var(--chatooly-font-weight-medium);cursor:pointer;transition:all var(--chatooly-transition-normal)}#chatooly-export-btn .chatooly-export-type-btn:hover{color:var(--chatooly-color-text);background:var(--chatooly-color-surface-hover)}#chatooly-export-btn .chatooly-export-type-btn.active{background:var(--chatooly-color-surface-active);color:var(--chatooly-color-text);border-color:var(--chatooly-color-primary)}#chatooly-export-btn .chatooly-form-group{margin-bottom:var(--chatooly-spacing-4)}#chatooly-export-btn .chatooly-form-group label{display:block;margin-bottom:var(--chatooly-spacing-2);font-size:var(--chatooly-font-size-sm);font-weight:var(--chatooly-font-weight-medium);color:var(--chatooly-color-text)}#chatooly-export-btn .chatooly-text-input{width:100%;padding:var(--chatooly-spacing-2)var(--chatooly-spacing-3);background:var(--chatooly-color-surface-hover);border:var(--chatooly-border-width-thin)solid var(--chatooly-color-border);border-radius:var(--chatooly-border-radius);color:var(--chatooly-color-text);font-size:var(--chatooly-font-size-sm);transition:all var(--chatooly-transition-normal)}#chatooly-export-btn .chatooly-text-input:focus{outline:none;border-color:var(--chatooly-color-primary);box-shadow:var(--chatooly-shadow-focus)}#chatooly-export-btn .chatooly-textarea{width:100%;padding:var(--chatooly-spacing-2)var(--chatooly-spacing-3);background:var(--chatooly-color-surface-hover);border:var(--chatooly-border-width-thin)solid var(--chatooly-color-border);border-radius:var(--chatooly-border-radius);color:var(--chatooly-color-text);font-size:var(--chatooly-font-size-sm);resize:vertical;min-height:80px;transition:all var(--chatooly-transition-normal)}#chatooly-export-btn .chatooly-textarea:focus{outline:none;border-color:var(--chatooly-color-primary);box-shadow:var(--chatooly-shadow-focus)}#chatooly-export-btn .chatooly-description{font-size:var(--chatooly-font-size-sm);color:var(--chatooly-color-text-muted);line-height:var(--chatooly-line-height-normal);margin-bottom:var(--chatooly-spacing-4)}#chatooly-export-btn .chatooly-info-list{display:flex;flex-direction:column;gap:var(--chatooly-spacing-2)}#chatooly-export-btn .chatooly-info-item{font-size:var(--chatooly-font-size-sm);color:var(--chatooly-color-text);padding:var(--chatooly-spacing-2);background:var(--chatooly-color-surface-hover);border-radius:var(--chatooly-border-radius)}#chatooly-export-btn .chatooly-export-options{margin-top:var(--chatooly-spacing-4)}#chatooly-export-btn .chatooly-info-box{background:var(--chatooly-color-primary-light);border:var(--chatooly-border-width-thin)solid var(--chatooly-color-primary);border-radius:var(--chatooly-border-radius-md);padding:var(--chatooly-spacing-3);margin-top:var(--chatooly-spacing-2)}#chatooly-export-btn .chatooly-btn-primary{padding:var(--chatooly-spacing-3)var(--chatooly-spacing-6);background:var(--chatooly-color-primary);border:none;border-radius:var(--chatooly-border-radius-lg);color:var(--chatooly-color-text-inverse);font-size:var(--chatooly-font-size-sm);font-weight:var(--chatooly-font-weight-semibold);cursor:pointer;transition:all var(--chatooly-transition-normal)}#chatooly-export-btn .chatooly-btn-primary:hover{background:var(--chatooly-color-primary-hover);transform:translateY(-1px)}#chatooly-export-btn .chatooly-btn-secondary{padding:var(--chatooly-spacing-3)var(--chatooly-spacing-6);background:var(--chatooly-color-surface-active);border:var(--chatooly-border-width-thin)solid var(--chatooly-color-border);border-radius:var(--chatooly-border-radius-lg);color:var(--chatooly-color-text);font-size:var(--chatooly-font-size-sm);font-weight:var(--chatooly-font-weight-semibold);cursor:pointer;transition:all var(--chatooly-transition-normal)}#chatooly-export-btn .chatooly-btn-secondary:hover{background:var(--chatooly-color-surface-hover);border-color:var(--chatooly-color-border-dark)}@media(max-width:768px){#chatooly-export-btn .chatooly-export-panel{min-width:320px;max-width:90vw}#chatooly-export-btn .chatooly-sidebar{flex-direction:row;overflow-x:auto;padding:var(--chatooly-spacing-3)0}#chatooly-export-btn .chatooly-nav-item{flex-shrink:0;padding:var(--chatooly-spacing-2)var(--chatooly-spacing-4);border-left:none;border-bottom:3px solid transparent}#chatooly-export-btn .chatooly-nav-item.active{border-left:none;border-bottom-color:var(--chatooly-color-primary)}#chatooly-export-btn .chatooly-nav-label{display:none}#chatooly-export-btn .chatooly-settings-content{padding:var(--chatooly-spacing-4)}#chatooly-export-btn .chatooly-size-inputs{flex-direction:column;gap:var(--chatooly-spacing-3)}#chatooly-export-btn .chatooly-scale-buttons,#chatooly-export-btn .chatooly-format-buttons{flex-wrap:wrap}}`;document.head.appendChild(style)},_attachButtonEvents:function(button){const minimizedBtn = button.querySelector('.chatooly-minimized-btn');const panel = button.querySelector('.chatooly-export-panel');minimizedBtn.addEventListener('click',(e)=>{e.stopPropagation();this._togglePanel(panel)});const navItems = button.querySelectorAll('.chatooly-nav-item');navItems.forEach(item =>{item.addEventListener('click',(e)=>{e.stopPropagation();navItems.forEach(nav => nav.classList.remove('active'));item.classList.add('active');this._showTabContent(item.dataset.tab)})});const scaleButtons = button.querySelectorAll('.chatooly-scale-btn');scaleButtons.forEach(btn =>{btn.addEventListener('click',(e)=>{e.stopPropagation();scaleButtons.forEach(b => b.classList.remove('active'));btn.classList.add('active')})});const ratioButtons = button.querySelectorAll('.chatooly-ratio-btn');ratioButtons.forEach(btn =>{btn.addEventListener('click',(e)=>{e.stopPropagation();const width = parseInt(btn.dataset.width);const height = parseInt(btn.dataset.height);this._setCanvasSize(width,height);this._showRatioFeedback(btn)})});const applyBtn = button.querySelector('.chatooly-apply-btn');if(applyBtn){applyBtn.addEventListener('click',(e)=>{e.stopPropagation();this._applyCanvasSize()})}const widthInput = button.querySelector('#chatooly-canvas-width');const heightInput = button.querySelector('#chatooly-canvas-height');if(widthInput){widthInput.addEventListener('keydown',(e)=>{if(e.key === 'Enter'){e.stopPropagation();this._applyCanvasSize()}})}if(heightInput){heightInput.addEventListener('keydown',(e)=>{if(e.key === 'Enter'){e.stopPropagation();this._applyCanvasSize()}})}const exportTypeButtons = button.querySelectorAll('.chatooly-export-type-btn');exportTypeButtons.forEach(btn =>{btn.addEventListener('click',(e)=>{e.stopPropagation();exportTypeButtons.forEach(b => b.classList.remove('active'));btn.classList.add('active');const exportType = btn.dataset.type;const imageOptions = button.querySelector('#image-export-options');const videoOptions = button.querySelector('#video-export-options');if(exportType === 'image'){imageOptions.style.display = 'block';videoOptions.style.display = 'none'}else if(exportType === 'video'){imageOptions.style.display = 'none';videoOptions.style.display = 'block'}})});const exportBtn = button.querySelector('.chatooly-export-btn');if(exportBtn){exportBtn.addEventListener('click',(e)=>{e.stopPropagation();this._handleExport()})}const videoExportBtn = button.querySelector('.chatooly-video-export-btn');if(videoExportBtn){videoExportBtn.addEventListener('click',(e)=>{e.stopPropagation();this._handleVideoExport()})}const publishBtn = button.querySelector('.chatooly-publish-btn');if(publishBtn){publishBtn.addEventListener('click',(e)=>{e.stopPropagation();this._handlePublish()})}const resetBtn = button.querySelector('.chatooly-reset-canvas-btn');if(resetBtn){resetBtn.addEventListener('click',(e)=>{e.stopPropagation();this._resetCanvas()})}document.addEventListener('click',(e)=>{if(!button.contains(e.target)){this._hidePanel(panel)}});document.addEventListener('keydown',(e)=>{if(e.key === 'Escape'){this._hidePanel(panel)}})},_showTabContent:function(tab){const allTabContents = document.querySelectorAll('.chatooly-tab-content');allTabContents.forEach(content =>{content.style.display = 'none'});const selectedContent = document.getElementById(tab + '-content');if(selectedContent){selectedContent.style.display = 'block'}},_setCanvasSize:function(width,height){const widthInput = document.getElementById('chatooly-canvas-width');const heightInput = document.getElementById('chatooly-canvas-height');if(widthInput)widthInput.value = width;if(heightInput)heightInput.value = height},_showRatioFeedback:function(button){const allRatioButtons = document.querySelectorAll('.chatooly-ratio-btn');allRatioButtons.forEach(btn => btn.classList.remove('active'));button.classList.add('active');setTimeout(()=>{button.classList.remove('active')},2000)},_applyCanvasSize:function(){if(Chatooly.canvasResizer && Chatooly.canvasResizer.applyExportSize){Chatooly.canvasResizer.applyExportSize()}else{console.warn('Chatooly:Canvas resizer not available')}},_resetCanvas:function(){if(Chatooly.canvasArea && Chatooly.canvasArea.resetZoomAndCenter){Chatooly.canvasArea.resetZoomAndCenter()}else if(Chatooly.canvasZoom){Chatooly.canvasZoom.resetZoom()}},_handlePublish:function(){const toolName = document.getElementById('chatooly-tool-name').value;const toolDescription = document.getElementById('chatooly-tool-description').value;if(!toolName.trim()){alert('Please enter a tool name');return}if(Chatooly.publish){Chatooly.publish.publish({name:toolName,description:toolDescription})}const panel = document.querySelector('.chatooly-export-panel');if(panel){this._hidePanel(panel)}},_handleExport:function(){const exportTypeBtn = document.querySelector('.chatooly-export-type-btn.active');const exportType = exportTypeBtn ? exportTypeBtn.dataset.type:'image';if(exportType === 'image'){this._exportImage()}else if(exportType === 'video'){this._exportVideo()}const panel = document.querySelector('.chatooly-export-panel');if(panel){this._hidePanel(panel)}},_exportImage:function(){const scaleBtn = document.querySelector('.chatooly-scale-btn.active');const scale = scaleBtn ? parseFloat(scaleBtn.dataset.scale):1;if(Chatooly.export){Chatooly.export('png',{resolution:scale})}},_exportVideo:function(){if(Chatooly.animationMediaRecorder){Chatooly.animationMediaRecorder.showExportDialog()}},_handleVideoExport:function(){const duration = parseFloat(document.querySelector('#chatooly-video-duration')?.value || 5);const fps = parseInt(document.querySelector('#chatooly-video-fps')?.value || 30);const format = document.querySelector('#chatooly-video-format')?.value || 'mp4';if(Chatooly.animationMediaRecorder){Chatooly.animationMediaRecorder.toolInfo = Chatooly.animationMediaRecorder.detectToolType();if(!Chatooly.animationMediaRecorder.toolInfo.canvas){alert('No canvas found for video recording. Make sure your canvas has id="chatooly-canvas"');return}const tempDuration = document.createElement('input');tempDuration.id = 'anim-duration';tempDuration.value = duration;document.body.appendChild(tempDuration);const tempFps = document.createElement('select');tempFps.id = 'anim-fps';const fpsOption = document.createElement('option');fpsOption.value = fps;fpsOption.selected = true;tempFps.appendChild(fpsOption);document.body.appendChild(tempFps);const tempFormat = document.createElement('select');tempFormat.id = 'anim-format';const formatOption = document.createElement('option');formatOption.value = format;formatOption.selected = true;tempFormat.appendChild(formatOption);document.body.appendChild(tempFormat);Chatooly.animationMediaRecorder.startRecording();setTimeout(()=>{tempDuration.remove();tempFps.remove();tempFormat.remove()},100)}const panel = document.querySelector('.chatooly-export-panel');if(panel){this._hidePanel(panel)}},_togglePanel:function(panel){if(panel.classList.contains('show')){this._hidePanel(panel)}else{this._showPanel(panel)}},_showPanel:function(panel){panel.style.display = 'flex';panel.offsetHeight;panel.classList.add('show')},_hidePanel:function(panel){panel.classList.remove('show');setTimeout(()=>{if(!panel.classList.contains('show')){panel.style.display = 'none'}},200)},setCanvasSize:function(width,height){console.warn('Chatooly.ui.setCanvasSize is deprecated. Use Chatooly.canvasResizer.setSize instead');if(Chatooly.canvasResizer){Chatooly.canvasResizer.setSize(width,height)}},applyCanvasSize:function(){console.warn('Chatooly.ui.applyCanvasSize is deprecated. Use Chatooly.canvasResizer.applySize instead');if(Chatooly.canvasResizer){Chatooly.canvasResizer.applySize()}},setTheme:function(theme){console.warn('Theme support not yet implemented')},addMenuItem:function(label,onClick,icon){const menu = document.querySelector('.chatooly-btn-menu');if(!menu)return;const button = document.createElement('button');button.textContent =(icon ? icon + ' ':'')+ label;button.addEventListener('click',onClick);menu.appendChild(button)},removeButton:function(){const button = document.getElementById('chatooly-export-btn');const styles = document.getElementById('chatooly-button-styles');if(button)button.remove();if(styles)styles.remove()},resetZoomAndCenter:function(){if(Chatooly.canvasArea && Chatooly.canvasArea.resetZoomAndCenter){Chatooly.canvasArea.resetZoomAndCenter()}else if(Chatooly.canvasZoom){Chatooly.canvasZoom.resetZoom()}const menu = document.querySelector('.chatooly-btn-menu');if(menu && this._hideMenu){this._hideMenu(menu)}},centerCanvas:function(){if(Chatooly.canvasArea && Chatooly.canvasArea.centerCanvas){Chatooly.canvasArea.centerCanvas()}const menu = document.querySelector('.chatooly-btn-menu');if(menu && this._hideMenu){this._hideMenu(menu)}},};document.addEventListener('DOMContentLoaded',function(){if(window.ChatoolyConfig){Chatooly.init(window.ChatoolyConfig)}else{Chatooly.init()}})})();